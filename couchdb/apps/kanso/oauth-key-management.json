{
    "_attachments": {
        "index.html": {
            "content_type": "text/html",
            "data": "PCFET0NUWVBFIGh0bWw+CjxodG1sPgogIDxoZWFkPgogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vYnJvd3NlcmlkLm9yZy9pbmNsdWRlLmpzIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0PgoKICAgIDwhLS0gT3B0aW9uYWwgc3R5bGVzIC0tPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iL19icm93c2VyaWQvc3R5bGUuY3NzIj4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9ImNzcy9zdHlsZS5jc3MiPgogIDwvaGVhZD4KCiAgPGJvZHk+CiAgICA8ZGl2IGNsYXNzPSJoZWFkIj4KICAgICAgPGgyPk9BdXRoIE1hbmFnZW1lbnQgZm9yIFNpZ24gb24gUHVibGlzaDwvaDI+CiAgICAgIDxpbWcgY2xhc3M9ImxvZ28iIHNyYz0iaW1hZ2VzL2xlYXJuaW5nLXJlZ2lzdHJ5LWxvZ28ucG5nIj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImNyZWRlbnRpYWxzIj4KICAgICAgPGRpdiBpZD0iYnJvd3NlcmlkIj4KICAgICAgICA8ZGl2IGNsYXNzPSJwaWN0dXJlIj48L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJsb2dpbiI+CiAgICAgICAgICA8aW1nIHNyYz0iL19icm93c2VyaWQvc2lnbl9pbl9ncmVlbi5wbmciPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0ibXNnIj48L2Rpdj4KICAgIDxkaXYgY2xhc3M9Im9hdXRoIj4KICAgICAgPGZpZWxkc2V0PgogICAgICAgIDxsZWdlbmQ+UHVibGlzaCBQYXNzd29yZDwvbGVnZW5kPgogICAgICAgIDxwPlVzaW5nIHlvdXIgZW1haWwgYWRkcmVzcyBhcyB1c2VybmFtZSBhbmQgdGhpcyBwYXNzd29yZCwgeW91IG1heSBwdWJsaXNoIHRvIHRoZSBCYXNpYyBQdWJsaXNoIG9yIFNXT1JEIGludGVyZmFjZXMgeW91ciBvd24gZGlnaXRhbGx5IHNpZ25lZCByZXNvdXJjZSBkYXRhIGVudmVsb3Blcy48L3A+CgogICAgICAgIDxsYWJlbCBmb3I9InBhc3N3b3JkX3NldCI+SXMgUGFzc3dvcmQgU2V0PzwvbGFiZWw+CiAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0icGFzc3dvcmRfc2V0IiBkaXNhYmxlZD0iZGlzYWJsZWQiPgoKICAgICAgICA8bGFiZWwgZm9yPSJwYXNzd29yZCI+UGFzc3dvcmQ8L2xhYmVsPgogICAgICAgIDxpbnB1dCB0eXBlPSJwYXNzd29yZCIgaWQ9InBhc3N3b3JkIj4KCiAgICAgICAgPGxhYmVsIGZvcj0idmVyaWZ5X3Bhc3N3b3JkIj5WZXJpZnkgUGFzc3dvcmQ8L2xhYmVsPgogICAgICAgIDxpbnB1dCB0eXBlPSJwYXNzd29yZCIgaWQ9InZlcmlmeV9wYXNzd29yZCI+CiAgICAgICAgPGJ1dHRvbiBpZD0ic2F2ZV9wYXNzd29yZCI+U2F2ZTwvYnV0dG9uPgogICAgICA8L2ZpZWxkc2V0PgogICAgICA8ZmllbGRzZXQ+CiAgICAgICAgPGxlZ2VuZD5TaWduaW5nIEluZm9ybWF0aW9uPC9sZWdlbmQ+CiAgICAgICAgPHA+VGhlIGZvbGxvd2luZyB3aWxsIGJlIGFwcGVuZGVkIHRvIHRoZSByZXNvdXJjZSBkYXRhIGRvY3VtZW50J3MgaWRlbnRpdHkgc2lnbmVyIGZpZWxkIGFsb25nIHdpdGggeW91ciBlbWFpbCBhZGRyZXNzIHNvIHRoYXQgeW91ciBzdWJtaXNzaW9ucyBtYXkgYmUgaWRlbnRpZmllZC48L3A+CiAgICAgICAgPGxhYmVsIGZvcj0iZnVsbF9uYW1lIj5GdWxsIE5hbWU8L2xhYmVsPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iZnVsbF9uYW1lIj4KCiAgICAgICAgPGJ1dHRvbiBpZD0iaW5mb191cGRhdGUiPlNhdmU8L2J1dHRvbj4KICAgICAgPC9maWVsZHNldD4KICAgICAgPGZpZWxkc2V0PgogICAgICAgIDxsZWdlbmQ+Mi1MZWdnZWQgT0F1dGggQ29uZmlnPC9sZWdlbmQ+CiAgICAgICAgPHA+VXNlIHRoZSBmb2xsb3dpbmcgd2hlbiBjb25uZWN0aW5nIHlvdXIgYXBwbGljYXRpb24gdG8gTFIgdG8gc2lnbiBvbiB5b3VyIGJlaGFsZi4gIElmIHRoZSBPQXV0aCBzaWduYXR1cmUgaXMgcHJlc2VudCB3aGVuIHlvdSBwdWJsaXNoLCB0aGUgZG9jdW1lbnRzIHlvdSBwdWJsaXNoIHdpbGwgYmUgc2lnbmVkIGJ5IHRoZSBub2RlLjwvcD4KICAgICAgICA8bGFiZWwgZm9yPSJjb25zdW1lcl9rZXkiPm9hdXRoX2NvbnN1bWVyX2tleTwvbGFiZWw+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGRpc2FibGVkPSJkaXNhYmxlZCIgaWQ9ImNvbnN1bWVyX2tleSIgdmFsdWU9Im5vZGVfc2lnbl9rZXkiPgoKICAgICAgICA8bGFiZWwgZm9yPSJjb25zdW1lcl9zZWNyZXQiPm9hdXRoX2NvbnN1bWVyX3NlY3JldDwvbGFiZWw+CiAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGRpc2FibGVkPSJkaXNhYmxlZCIgaWQ9ImNvbnN1bWVyX3NlY3JldCI+CgoKICAgICAgICA8bGFiZWwgZm9yPSJ0b2tlbiI+b2F1dGhfdG9rZW48L2xhYmVsPgogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBkaXNhYmxlZD0iZGlzYWJsZWQiIGlkPSJ0b2tlbiIgdmFsdWU9Im5vZGVfc2lnbl90b2tlbiI+CgogICAgICAgIDxsYWJlbCBmb3I9InRva2VuX3NlY3JldCI+b2F1dGhfdG9rZW5fc2VjcmV0PC9sYWJlbD4KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgZGlzYWJsZWQ9ImRpc2FibGVkIiBpZD0idG9rZW5fc2VjcmV0Ij4KCiAgICAgICAgPGJ1dHRvbiBpZD0icmVnZW5lcmF0ZSI+UmV2b2tlIGFuZCBSZWdlbmVyYXRlPC9idXR0b24+CiAgICAgIDwvZmllbGRzZXQ+CiAgICAgIAogICAgPC9kaXY+CiAgPC9ib2R5PgoKICA8IS0tIFJlY29tbWVuZGVkIGNvbnZlbmllbmNlIEFQSSAtLT4KICA8c2NyaXB0IHNyYz0iL191dGlscy9zY3JpcHQvanF1ZXJ5LmpzIiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPjwvc2NyaXB0PgogIDxzY3JpcHQgc3JjPSIvX3V0aWxzL3NjcmlwdC9vYXV0aC5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4KICA8c2NyaXB0IHNyYz0iL191dGlscy9zY3JpcHQvc2hhMS5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4KICA8c2NyaXB0IHNyYz0iL19icm93c2VyaWQvbWFpbi5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4KICA8c2NyaXB0IHNyYz0ibW9kdWxlcy5qcyIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij48L3NjcmlwdD4KICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICB2YXIgbWFuYWdlX3Rva2VucyA9IHJlcXVpcmUoImxpYi9tYW5hZ2UtdG9rZW5zIik7CgogICAgbWFuYWdlX3Rva2Vucy5yZWdpc3RlckNhbGxiYWNrcygpOwogIDwvc2NyaXB0Pgo8L2h0bWw+"
        },
        "css/style.css": {
            "content_type": "text/css",
            "data": "CmRpdi5vYXV0aCB7CiAgICBkaXNwbGF5OiBub25lOwogICAgd2lkdGg6IDEwMCU7CiAgICBjbGVhcjogYm90aDsKfQoKZGl2Lm9hdXRoIGlucHV0W3R5cGU9Y2hlY2tib3hdLCBkaXYub2F1dGggbGFiZWxbZm9yPXBhc3N3b3JkX3NldF0gewogICAgZGlzcGxheTogaW5saW5lOwogICAgd2lkdGg6IDI1cHg7Cn0KCmRpdi5vYXV0aCBsYWJlbCwgZGl2Lm9hdXRoIGlucHV0IHsKICAgIGRpc3BsYXk6IGJsb2NrOwogICAgd2lkdGg6IDEwMCU7Cn0KCmRpdi5oZWFkICwgZGl2LmNyZWRlbnRpYWxzIHsKICAgIHdpZHRoOiAxMDAlOwogICAgY2xlYXI6IGJvdGg7Cn0KCiNicm93c2VyaWQgewogICAgd2lkdGg6IGF1dG87Cn0KCmRpdi5sb2dpbiB7IAoKfQoKLmhlYWQgaDIgewogICAgZmxvYXQ6IGxlZnQ7CiAgICB3aWR0aDogNjAlOwp9CgoKLnBpY3R1cmUgewogICAgZmxvYXQ6IGxlZnQ7Cn0KCmltZyB7CiAgICBib3JkZXI6IG5vbmU7Cn0KCi5sb2dvIHsKICAgIGZsb2F0OiByaWdodDsKfQoKLmNsZWFyIHsKICAgIGNsZWFyOiBib3RoOwp9"
        },
        "images/learning-registry-logo.png": {
            "content_type": "image/png",
            "data": ""
        },
        "modules.js": {
            "content_type": "application/json; charset=utf-8",
            "data": ""
        }
    },
    "lib": {
        "app": "",
        "manage-tokens": "\nvar session = require(\"session\"),\n    users = require(\"users\"),\n    _ = require(\"underscore\")._;\n\nfunction log(msg) {\n    try{\n        console.log(msg)\n    } catch (e) {\n\n    }\n}\n\n\nfunction getOAuth(email, doc, regenerate) {\n    if (regenerate || !(doc.oauth \n        && doc.oauth.consumer_keys \n        && doc.oauth.consumer_keys[email]\n        && doc.oauth.tokens\n        && doc.oauth.tokens.node_sign_token)) {\n\n        doc.oauth = doc.oauth || {};\n        doc.oauth.consumer_keys = doc.oauth.consumer_keys || {};\n        doc.oauth.tokens = doc.oauth.tokens || {};\n\n        doc.oauth.consumer_keys[email] = exports.generateSecret(32);\n        doc.oauth.tokens.node_sign_token = exports.generateSecret(32);\n\n        if (!doc.roles || _.indexOf(doc.roles, \"node_sign\") == -1) {\n            doc.roles = doc.roles || [];\n            // doc.roles.push(\"node_sign\");\n        }\n\n        users.update(email, null, doc, function(err) {\n            if (err) {\n                log(err);\n            } else {\n                getUserInfo(email);\n            }\n        });\n\n    } else {\n        $(\".oauth\").show(500);\n        $(\"#consumer_key\").val(email)\n        $(\"#consumer_secret\").val(doc.oauth.consumer_keys[email]);\n        $(\"#token_secret\").val(doc.oauth.tokens.node_sign_token);\n    }\n}\n\nfunction getSigningInfo(email, doc) {\n    if (doc.lrsignature && doc.lrsignature.full_name) {\n        $(\"#full_name\").val(doc.lrsignature.full_name);\n    }\n}\n\nfunction setMessage(msg, wait, cb) {\n    if (!wait) {\n        wait = 10000;\n    }\n\n    $(\".msg\").fadeOut('fast').empty().text(msg).fadeIn('fast').delay(wait).fadeOut('slow').hide('fast');\n\n    if (cb) {\n        cb();\n    }\n}\n\nfunction resetForms() {\n    $(\".oauth\").hide(500);\n    $(\"#password\").val(\"\");\n    $(\"#verify_password\").val(\"\");\n    $(\"#password_set\").prop(\"checked\", false);\n    $(\"#consumer_key\").val(\"\");\n    $(\"#consumer_secret\").val(\"\");\n    $(\"#token_secret\").val(\"\");\n    $(\"#full_name\").val(\"\");\n}\n\nfunction setSigningInfo() {\n    full_name = $(\"#full_name\").val();\n    if ($.trim(full_name) !== \"\") {\n        session.info(function(err, session_info){\n            if (session_info.userCtx.name) {\n                users.get(session_info.userCtx.name, function(err, doc){\n                    doc.lrsignature = doc.lrsignature || {}\n                    doc.lrsignature.full_name = full_name;\n\n                    users.update(session_info.userCtx.name, null, doc, function(err) {\n                        if (err) {\n                            log(err);\n                            setMessage(\"Unable to save signing information.\");\n                        } else {\n                            setMessage(\"Information saved.\")\n                        }\n                    });\n                }); \n            };\n        });\n    }\n}\n\nfunction setPasswordInfo(email, doc) {\n    if (doc.password_sha) {\n        $(\"#password_set\").prop(\"checked\", true);\n    } else {\n        $(\"#password_set\").prop(\"checked\", false);\n    }\n}\n\nfunction getUserInfo(email) {\n    users.get(email, function(err, doc) {\n        if (!err) {\n            getOAuth(email, doc);\n            getSigningInfo(email, doc);\n            setPasswordInfo(email, doc);\n        }\n        else {\n            setMessage(err);\n        }\n    });\n}\n\nfunction revokeAndGenerate() {\n    session.info(function(err, session_info){\n        if (session_info.userCtx.name) {\n            users.get(session_info.userCtx.name, function (err, doc){\n                if (!err) {\n                   getOAuth(session_info.userCtx.name, doc, true); \n                }\n            });\n        } else {\n            sessionTimeout();\n        }\n    });\n}\n\nfunction sessionTimeout () {\n    setMessage(\"Session has timed out.\", 50000, function(){\n        window.location.reload();\n    });\n}\n\nfunction checkPasswordMatch() {\n    var passwd1 = $(\"#password\").val();\n    var passwd2 = $(\"#verify_password\").val();\n    if (passwd1 === \"\" || passwd2 === \"\" || passwd1 !== passwd2)\n        return false;\n    return true;\n}\n\nfunction savePassword() {\n    var passwd1 = $(\"#password\").val();\n    var passwd2 = $(\"#verify_password\").val();\n    if ( checkPasswordMatch() ) {\n        session.info(function(err, session_info) {\n            if (session_info.userCtx.name) {\n                users.get(session_info.userCtx.name, function(err, doc){\n                    doc.password = passwd1;\n\n                    users.update(session_info.userCtx.name, null, doc, function(err) {\n                        if (err) {\n                            log(err);\n                            setMessage(\"Unable to save publish password.\");\n                        } else {\n                            setMessage(\"Password saved.\");\n                            $(\"#password\").val(\"\");\n                            $(\"#verify_password\").val(\"\");\n                            $(\"#password_set\").prop(\"checked\", true);\n                        }\n                    });\n                }); \n            };\n        });\n    } else {\n        setMessage(\"Passwords do no match.\");\n    }\n}\n\n\nexports.registerCallbacks = function() {\n    $.couch.browserid.login(function(evt, err, info) { \n        try {\n            var email = null;\n            if (info && info.name) {\n                email = info.name;\n            } else if (info && info.email) {\n                email = info.email\n            }\n\n            if (email) {\n                log(email);\n                getUserInfo(email);\n            }\n        } catch (error) {\n\n        } finally {\n\n        } \n    });\n\n    $.couch.browserid.logout(function(evt, err, info){\n        resetForms();\n    });\n\n    $(\"#info_update\").bind('click', setSigningInfo);\n    $(\"#regenerate\").bind('click', revokeAndGenerate);\n    $(\"#save_password\").bind('click', savePassword);\n}\n\n\n// Simple secret key generator\nexports.generateSecret = function(length) {\n    var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    var secret = '';\n    for (var i = 0; i < length; i++) {\n        secret += tab.charAt(Math.floor(Math.random() * 64));\n    }\n    return secret;\n}\n\n"
    },
    "users": "/**\n * ## Users module\n *\n * Functions for querying, creating, updating and deleting user documents.\n *\n * Functions in this module follow the node.js callback style. The first\n * argument is an error object (if one occurred), the following arguments are\n * the results of the operation. The callback is always the last argument to a\n * function.\n *\n * @module\n */\n\n\nvar db = require('db'),\n    session = require('session'),\n    sha1 = require('sha1'),\n    _ = require('underscore')._;\n\n\n/**\n * Returns the authentication database for the current user's session.\n *\n * @name authdb(callback)\n * @param {Function} callback\n * @api private\n */\n\nvar authdb = function(callback) {\n    db.request({\n        type: \"GET\",\n        url: \"/_session\"\n    },\n    function (err, resp) {\n        if (err) {\n            return callback(err, null);\n        }\n        callback(null, resp.info.authentication_db);\n    });\n};\n\n\n/**\n * Returns successful if username is in admin database.\n *\n * @name getAdmin(username, callback)\n * @param {String} username\n * @param {Function} callback\n * @api private\n */\n\nvar getAdmin = function(username, callback) {\n    db.request({\n        type: 'GET',\n        url: '/_config/admins/' + encodeURIComponent(username),\n        contentType: 'application/json'\n    }, callback);\n};\n\n\n/**\n * Delete user from user database.\n *\n * @name deleteUser(authdb, id, user, callback)\n * @param {String} user database\n * @param {String} user id\n * @param {Object} user document\n * @param {Function} callback\n * @api private\n */\n\nvar deleteUser = function(authdb, id, user, callback) {\n    db.request({\n        type: 'DELETE',\n        url: '/' + db.encode(authdb) + '/' + db.encode(id) +\n             '?rev=' + db.encode(user._rev),\n        contentType: 'application/json'\n    }, callback);\n};\n\n/**\n * Delete user from admin database.\n *\n * @name deleteAdmin(username, callback)\n * @param {String} username\n * @param {Function} callback\n * @api private\n */\n\nvar deleteAdmin = function(username, callback) {\n    db.request({\n        type: 'DELETE',\n        url: '/_config/admins/' + encodeURIComponent(username),\n        contentType: 'application/json'\n    }, callback);\n};\n\n\n/**\n * Save user to user database.\n *\n * @name saveUser(authdb, doc, callback)\n * @param {String} user database\n * @param {Object} user document\n * @param {Function} callback\n * @api private\n */\n\nvar saveUser = function(authdb, doc, callback) {\n    var url = '/' + authdb + '/' + doc._id;\n    var req = {\n        type: 'PUT',\n        url: url,\n        data: JSON.stringify(doc),\n        processData: false,\n        contentType: 'application/json'\n    };\n    db.request(req, callback);\n};\n\n\n/**\n * Create a new user in the user database.\n *\n * @name createUser(username, password, properties, callback)\n * @param {String} username\n * @param {String} password\n * @param {Hash} properties\n * @param {Function} callback\n * @api private\n */\n\nvar createUser = function(username, password, properties, callback) {\n    var doc = {};\n    doc._id = 'org.couchdb.user:' + username;\n    doc.name = username;\n    doc.type = 'user';\n\n    _.extend(doc, properties);\n\n    db.newUUID(100, function (err, uuid) {\n        if (err) {\n            return callback(err);\n        }\n        doc.salt = uuid;\n        doc.password_sha = sha1.hex(password + doc.salt);\n\n        authdb(function (err, authdb) {\n            if (err) { return callback(err); }\n            saveUser(authdb, doc, callback);\n        });\n    });\n};\n\n\n/**\n * Create a new user in the admin database.\n *\n * @name createAdmin(username, password, callback)\n * @param {String} username\n * @param {String} password\n * @param {Function} callback\n * @api private\n */\n\nvar createAdmin = function(username, password, callback) {\n    var url = '/_config/admins/' + encodeURIComponent(username);\n    var req = {\n        type: 'PUT',\n        url: url,\n        data: JSON.stringify(password),\n        processData: false,\n        contentType: 'application/json'\n    };\n    db.request(req, callback);\n};\n\n\n/**\n * Sanitize the arguments by allowing to omit the properties and\n * predefining the roles if they're not set.\n *\n * @name sanitizeArguments(username, password, properties, cb, cb2)\n * @param {String} username\n * @param {String} password\n * @param {Hash} properties\n * @param {Function} cb\n * @param {Function} cb2\n * @api private\n */\n\nvar sanitizeArguments = function(username, password, properties, cb, cb2) {\n    if (!cb) {\n        cb = properties;\n        properties = {};\n    }\n    if (!properties.roles) {\n        properties.roles = [];\n    }\n    cb2(username, password, properties, cb);\n};\n\n\n/**\n * Deletes an existing user document, given its username. You\n * must be logged in as an administrative user for this function\n * to succeed.\n *\n * @name delete(username, callback)\n * @param {String} username - The username of the user to delete\n * @param {Function} callback(err,response) - Function called on completion of\n *     the operation\n * @api public\n *\n * ```javascript\n * users.delete('username', function (err) {\n *     if (err) // there was an error deleting the user\n *     else     // success\n * });\n * ```\n */\n\nexports.delete = function (username, callback) {\n    exports.get(username, function(err, user, options) {\n        if (err) { return callback(err); }\n\n        getAdmin(username, function(err, admin) {\n            if (err) {\n                if (err.status !== 404) {\n                    return callback(err);\n                }\n                deleteUser(options.authdb, options.id, user, callback);\n            }\n            else {\n                deleteAdmin(username, function(err) {\n                    if (err) {\n                        return callback(err);\n                    }\n                    deleteUser(options.authdb, options.id, user, callback);\n                });\n            }\n        });\n    });\n};\n\n\n/**\n * Get a single user by username. The third argument to the callback is an info\n * object which returns the authdb used, and the real id of the user with\n * \"org.couchdb.user:\" prefix.\n *\n * @name get(username, callback)\n * @param {String} username - The username of the user to get\n * @param {Function} callback(err,user,info) - Function called on completion\n * @api public\n *\n * ```javascript\n * users.get('testuser', function (err, doc) {\n *     if (err) // there was an error fetching the user document\n *     else     // success\n * });\n * ```\n */\n\nexports.get = function(username, callback) {\n    var id = 'org.couchdb.user:' + username;\n\n    authdb(function (err, authdb) {\n        if (err) {\n            return callback(err);\n        }\n        db.request({\n            type: 'GET',\n            url: '/' + db.encode(authdb) + '/' + db.encode(id),\n            contentType: 'application/json'\n        },\n        function (err, user) {\n            callback(err, user, {authdb: authdb, id: id});\n        });\n    });\n};\n\n\n/**\n * List users in the auth database. By default, it will list all users.\n * By using the optional `q` parameter, you can pass additional options to the\n * `_all_docs` view for the auth database.\n *\n * @name list([q], callback)\n * @param {Object} q - Query parameters (optional)\n * @param {Function} callback(err,list) - Function called with the resulting\n *     list (or error)\n * @api public\n *\n * ```javascript\n * users.list(function (err, list) {\n *     if (err) // there was an error querying the auth database\n *     else     // success\n * });\n * ```\n */\n\nexports.list = function(q, callback) {\n    if (!callback) {\n        callback = q;\n        q = {};\n    }\n    if (!q.startkey) {\n        q.startkey = '\"org.couchdb.user:\"';\n    }\n    if (!q.endkey) {\n        q.endkey = '\"org.couchdb.user_\"';\n    }\n    authdb(function (err, authdb) {\n        if (err) {\n            callback(err, null);\n        }\n        var req = {\n            type: 'GET',\n            url: '/' + db.encode(authdb) + '/_all_docs',\n            data: db.stringifyQuery(q),\n            expect_json: true\n        };\n        db.request(req, function(err, result) {\n            if (err) {\n                return callback(err, null);\n            }\n            var users = _(result.rows).select(function(row) {\n                return row.id.match(/^org\\.couchdb\\.user/);\n            });\n            callback(null, users);\n        });\n    });\n};\n\n\n/**\n * Creates a new user document with given username and password.\n * If properties.roles contains '_admin', user will be made admin.\n *\n * @name create(username, password, [properties], callback)\n * @param {String} username - The username of the new user\n * @param {String} password - The unhashed password for the new user\n * @param {Object} properties - Additional properties such as roles to extend\n *     the user document with (optional)\n * @param {Function} callback(err,response) - Function called on completion or\n *     error\n * @api public\n *\n * ```javascript\n * users.create('testuser', 'testing', {roles: ['example']}, function (err) {\n *     if (err) // an error occurred\n *     else     // successfully created new user\n * });\n * ```\n */\n\nexports.create = function (username, password, properties, callback) {\n    sanitizeArguments(username, password, properties, callback,\n        function(username, password, properties, callback) {\n            if (_.indexOf(properties.roles, \"_admin\") !== -1) {\n                createAdmin(username, password, function (err) {\n                    if (err) {\n                        return callback(err);\n                    }\n                    properties.roles = [];\n                    createUser(username, password, properties, callback);\n                });\n            }\n            else {\n                createUser(username, password, properties, callback);\n            }\n    });\n};\n\n\n/**\n * Updates an existing user document. Similar usage to the create function.\n *\n * @name update(username, password, properties, callback)\n * @param {String} username - The username of the new user\n * @param {String} password - The unhashed password for the new user\n * @param {Object} properties - Additional properties such as roles to extend\n *     the user document with (optional)\n * @param {Function} callback(err,response) - Function called on completion or\n *     error\n * @api public\n *\n * ```javascript\n * users.update('testuser', 'testing', {roles: ['example']}, function (err) {\n *     if (err) // an error occurred\n *     else     // successfully updated user\n * });\n * ```\n */\n\nexports.update = function (username, password, properties, callback) {\n    sanitizeArguments(username, password, properties, callback,\n        function(username, password, properties, callback) {\n            exports.get(username, function (err, user, options) {\n                if (err) {\n                    return callback(err);\n                }\n                if (_.indexOf(properties.roles, \"_admin\") === -1) {\n                    _.extend(user, properties);\n                }\n                if (password) {\n                    user.password_sha = sha1.hex(password + user.salt);\n                }\n\n                saveUser(options.authdb, user, function (err, user) {\n                    \n                    session.info(function(err, session_info){\n                        if (session_info.userCtx.roles && _.indexOf(session_info.userCtx.roles, \"_admin\") !== -1) {\n                            if (_.indexOf(properties.roles, \"_admin\") !== -1) {\n                                createAdmin(username, password, function () {\n                                    callback(null, user);\n                                });\n                            }\n                            else {\n                                getAdmin(username, function(err, admin) {\n                                    if (err) {\n                                        if (err.status !== 404) {\n                                            return callback(err);\n                                        }\n                                        return callback(null, user);\n                                    }\n                                    else {\n                                        deleteAdmin(username, callback);\n                                    }\n                                });\n                            }\n                        } else {\n                            callback(err, user);\n                        }\n                    });\n                    \n                });\n            });\n    });\n};\n",
    "underscore": "//     Underscore.js 1.3.3\n//     (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.\n//     Underscore is freely distributable under the MIT license.\n//     Portions of Underscore are inspired or borrowed from Prototype,\n//     Oliver Steele's Functional, and John Resig's Micro-Templating.\n//     For all details and documentation:\n//     http://documentcloud.github.com/underscore\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `global` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Establish the object that gets returned to break out of a loop iteration.\n  var breaker = {};\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var slice            = ArrayProto.slice,\n      unshift          = ArrayProto.unshift,\n      toString         = ObjProto.toString,\n      hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeForEach      = ArrayProto.forEach,\n    nativeMap          = ArrayProto.map,\n    nativeReduce       = ArrayProto.reduce,\n    nativeReduceRight  = ArrayProto.reduceRight,\n    nativeFilter       = ArrayProto.filter,\n    nativeEvery        = ArrayProto.every,\n    nativeSome         = ArrayProto.some,\n    nativeIndexOf      = ArrayProto.indexOf,\n    nativeLastIndexOf  = ArrayProto.lastIndexOf,\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind;\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) { return new wrapper(obj); };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object via a string identifier,\n  // for Closure Compiler \"advanced\" mode.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root['_'] = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.3.3';\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles objects with the built-in `forEach`, arrays, and raw objects.\n  // Delegates to **ECMAScript 5**'s native `forEach` if available.\n  var each = _.each = _.forEach = function(obj, iterator, context) {\n    if (obj == null) return;\n    if (nativeForEach && obj.forEach === nativeForEach) {\n      obj.forEach(iterator, context);\n    } else if (obj.length === +obj.length) {\n      for (var i = 0, l = obj.length; i < l; i++) {\n        if (i in obj && iterator.call(context, obj[i], i, obj) === breaker) return;\n      }\n    } else {\n      for (var key in obj) {\n        if (_.has(obj, key)) {\n          if (iterator.call(context, obj[key], key, obj) === breaker) return;\n        }\n      }\n    }\n  };\n\n  // Return the results of applying the iterator to each element.\n  // Delegates to **ECMAScript 5**'s native `map` if available.\n  _.map = _.collect = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\n    each(obj, function(value, index, list) {\n      results[results.length] = iterator.call(context, value, index, list);\n    });\n    if (obj.length === +obj.length) results.length = obj.length;\n    return results;\n  };\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.\n  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {\n    var initial = arguments.length > 2;\n    if (obj == null) obj = [];\n    if (nativeReduce && obj.reduce === nativeReduce) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);\n    }\n    each(obj, function(value, index, list) {\n      if (!initial) {\n        memo = value;\n        initial = true;\n      } else {\n        memo = iterator.call(context, memo, value, index, list);\n      }\n    });\n    if (!initial) throw new TypeError('Reduce of empty array with no initial value');\n    return memo;\n  };\n\n  // The right-associative version of reduce, also known as `foldr`.\n  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.\n  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {\n    var initial = arguments.length > 2;\n    if (obj == null) obj = [];\n    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);\n    }\n    var reversed = _.toArray(obj).reverse();\n    if (context && !initial) iterator = _.bind(iterator, context);\n    return initial ? _.reduce(reversed, iterator, memo, context) : _.reduce(reversed, iterator);\n  };\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, iterator, context) {\n    var result;\n    any(obj, function(value, index, list) {\n      if (iterator.call(context, value, index, list)) {\n        result = value;\n        return true;\n      }\n    });\n    return result;\n  };\n\n  // Return all the elements that pass a truth test.\n  // Delegates to **ECMAScript 5**'s native `filter` if available.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);\n    each(obj, function(value, index, list) {\n      if (iterator.call(context, value, index, list)) results[results.length] = value;\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    each(obj, function(value, index, list) {\n      if (!iterator.call(context, value, index, list)) results[results.length] = value;\n    });\n    return results;\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Delegates to **ECMAScript 5**'s native `every` if available.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, iterator, context) {\n    var result = true;\n    if (obj == null) return result;\n    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);\n    each(obj, function(value, index, list) {\n      if (!(result = result && iterator.call(context, value, index, list))) return breaker;\n    });\n    return !!result;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Delegates to **ECMAScript 5**'s native `some` if available.\n  // Aliased as `any`.\n  var any = _.some = _.any = function(obj, iterator, context) {\n    iterator || (iterator = _.identity);\n    var result = false;\n    if (obj == null) return result;\n    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);\n    each(obj, function(value, index, list) {\n      if (result || (result = iterator.call(context, value, index, list))) return breaker;\n    });\n    return !!result;\n  };\n\n  // Determine if a given value is included in the array or object using `===`.\n  // Aliased as `contains`.\n  _.include = _.contains = function(obj, target) {\n    var found = false;\n    if (obj == null) return found;\n    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;\n    found = any(obj, function(value) {\n      return value === target;\n    });\n    return found;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    return _.map(obj, function(value) {\n      return (_.isFunction(method) ? method || value : value[method]).apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, function(value){ return value[key]; });\n  };\n\n  // Return the maximum element or (element-based computation).\n  _.max = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0]) return Math.max.apply(Math, obj);\n    if (!iterator && _.isEmpty(obj)) return -Infinity;\n    var result = {computed : -Infinity};\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      computed >= result.computed && (result = {value : value, computed : computed});\n    });\n    return result.value;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iterator, context) {\n    if (!iterator && _.isArray(obj) && obj[0] === +obj[0]) return Math.min.apply(Math, obj);\n    if (!iterator && _.isEmpty(obj)) return Infinity;\n    var result = {computed : Infinity};\n    each(obj, function(value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      computed < result.computed && (result = {value : value, computed : computed});\n    });\n    return result.value;\n  };\n\n  // Shuffle an array.\n  _.shuffle = function(obj) {\n    var shuffled = [], rand;\n    each(obj, function(value, index, list) {\n      rand = Math.floor(Math.random() * (index + 1));\n      shuffled[index] = shuffled[rand];\n      shuffled[rand] = value;\n    });\n    return shuffled;\n  };\n\n  // Sort the object's values by a criterion produced by an iterator.\n  _.sortBy = function(obj, val, context) {\n    var iterator = _.isFunction(val) ? val : function(obj) { return obj[val]; };\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value : value,\n        criteria : iterator.call(context, value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria, b = right.criteria;\n      if (a === void 0) return 1;\n      if (b === void 0) return -1;\n      return a < b ? -1 : a > b ? 1 : 0;\n    }), 'value');\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = function(obj, val) {\n    var result = {};\n    var iterator = _.isFunction(val) ? val : function(obj) { return obj[val]; };\n    each(obj, function(value, index) {\n      var key = iterator(value, index);\n      (result[key] || (result[key] = [])).push(value);\n    });\n    return result;\n  };\n\n  // Use a comparator function to figure out at what index an object should\n  // be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iterator) {\n    iterator || (iterator = _.identity);\n    var low = 0, high = array.length;\n    while (low < high) {\n      var mid = (low + high) >> 1;\n      iterator(array[mid]) < iterator(obj) ? low = mid + 1 : high = mid;\n    }\n    return low;\n  };\n\n  // Safely convert anything iterable into a real, live array.\n  _.toArray = function(obj) {\n    if (!obj)                                     return [];\n    if (_.isArray(obj))                           return slice.call(obj);\n    if (_.isArguments(obj))                       return slice.call(obj);\n    if (obj.toArray && _.isFunction(obj.toArray)) return obj.toArray();\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    return _.isArray(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];\n  };\n\n  // Returns everything but the last entry of the array. Especcialy useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N. The **guard** check allows it to work with\n  // `_.map`.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array. The **guard** check allows it to work with `_.map`.\n  _.last = function(array, n, guard) {\n    if ((n != null) && !guard) {\n      return slice.call(array, Math.max(array.length - n, 0));\n    } else {\n      return array[array.length - 1];\n    }\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail`.\n  // Especially useful on the arguments object. Passing an **index** will return\n  // the rest of the values in the array from that index onward. The **guard**\n  // check allows it to work with `_.map`.\n  _.rest = _.tail = function(array, index, guard) {\n    return slice.call(array, (index == null) || guard ? 1 : index);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, function(value){ return !!value; });\n  };\n\n  // Return a completely flattened version of an array.\n  _.flatten = function(array, shallow) {\n    return _.reduce(array, function(memo, value) {\n      if (_.isArray(value)) return memo.concat(shallow ? value : _.flatten(value));\n      memo[memo.length] = value;\n      return memo;\n    }, []);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iterator) {\n    var initial = iterator ? _.map(array, iterator) : array;\n    var results = [];\n    // The `isSorted` flag is irrelevant if the array only contains two elements.\n    if (array.length < 3) isSorted = true;\n    _.reduce(initial, function (memo, value, index) {\n      if (isSorted ? _.last(memo) !== value || !memo.length : !_.include(memo, value)) {\n        memo.push(value);\n        results.push(array[index]);\n      }\n      return memo;\n    }, []);\n    return results;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(_.flatten(arguments, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays. (Aliased as \"intersect\" for back-compat.)\n  _.intersection = _.intersect = function(array) {\n    var rest = slice.call(arguments, 1);\n    return _.filter(_.uniq(array), function(item) {\n      return _.every(rest, function(other) {\n        return _.indexOf(other, item) >= 0;\n      });\n    });\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = _.flatten(slice.call(arguments, 1), true);\n    return _.filter(array, function(value){ return !_.include(rest, value); });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    var args = slice.call(arguments);\n    var length = _.max(_.pluck(args, 'length'));\n    var results = new Array(length);\n    for (var i = 0; i < length; i++) results[i] = _.pluck(args, \"\" + i);\n    return results;\n  };\n\n  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),\n  // we need this function. Return the position of the first occurrence of an\n  // item in an array, or -1 if the item is not included in the array.\n  // Delegates to **ECMAScript 5**'s native `indexOf` if available.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = function(array, item, isSorted) {\n    if (array == null) return -1;\n    var i, l;\n    if (isSorted) {\n      i = _.sortedIndex(array, item);\n      return array[i] === item ? i : -1;\n    }\n    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item);\n    for (i = 0, l = array.length; i < l; i++) if (i in array && array[i] === item) return i;\n    return -1;\n  };\n\n  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.\n  _.lastIndexOf = function(array, item) {\n    if (array == null) return -1;\n    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) return array.lastIndexOf(item);\n    var i = array.length;\n    while (i--) if (i in array && array[i] === item) return i;\n    return -1;\n  };\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (arguments.length <= 1) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = arguments[2] || 1;\n\n    var len = Math.max(Math.ceil((stop - start) / step), 0);\n    var idx = 0;\n    var range = new Array(len);\n\n    while(idx < len) {\n      range[idx++] = start;\n      start += step;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Reusable constructor function for prototype setting.\n  var ctor = function(){};\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Binding with arguments is also known as `curry`.\n  // Delegates to **ECMAScript 5**'s native `Function.bind` if available.\n  // We check for `func.bind` first, to fail fast when `func` is undefined.\n  _.bind = function bind(func, context) {\n    var bound, args;\n    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError;\n    args = slice.call(arguments, 2);\n    return bound = function() {\n      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));\n      ctor.prototype = func.prototype;\n      var self = new ctor;\n      var result = func.apply(self, args.concat(slice.call(arguments)));\n      if (Object(result) === result) return result;\n      return self;\n    };\n  };\n\n  // Bind all of an object's methods to that object. Useful for ensuring that\n  // all callbacks defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var funcs = slice.call(arguments, 1);\n    if (funcs.length == 0) funcs = _.functions(obj);\n    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memo = {};\n    hasher || (hasher = _.identity);\n    return function() {\n      var key = hasher.apply(this, arguments);\n      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));\n    };\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){ return func.apply(null, args); }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = function(func) {\n    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));\n  };\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time.\n  _.throttle = function(func, wait) {\n    var context, args, timeout, throttling, more, result;\n    var whenDone = _.debounce(function(){ more = throttling = false; }, wait);\n    return function() {\n      context = this; args = arguments;\n      var later = function() {\n        timeout = null;\n        if (more) func.apply(context, args);\n        whenDone();\n      };\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (throttling) {\n        more = true;\n      } else {\n        result = func.apply(context, args);\n      }\n      whenDone();\n      throttling = true;\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout;\n    return function() {\n      var context = this, args = arguments;\n      var later = function() {\n        timeout = null;\n        if (!immediate) func.apply(context, args);\n      };\n      if (immediate && !timeout) func.apply(context, args);\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = function(func) {\n    var ran = false, memo;\n    return function() {\n      if (ran) return memo;\n      ran = true;\n      return memo = func.apply(this, arguments);\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return function() {\n      var args = [func].concat(slice.call(arguments, 0));\n      return wrapper.apply(this, args);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var funcs = arguments;\n    return function() {\n      var args = arguments;\n      for (var i = funcs.length - 1; i >= 0; i--) {\n        args = [funcs[i].apply(this, args)];\n      }\n      return args[0];\n    };\n  };\n\n  // Returns a function that will only be executed after being called N times.\n  _.after = function(times, func) {\n    if (times <= 0) return func();\n    return function() {\n      if (--times < 1) { return func.apply(this, arguments); }\n    };\n  };\n\n  // Object Functions\n  // ----------------\n\n  // Retrieve the names of an object's properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = nativeKeys || function(obj) {\n    if (obj !== Object(obj)) throw new TypeError('Invalid object');\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    return _.map(obj, _.identity);\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      for (var prop in source) {\n        obj[prop] = source[prop];\n      }\n    });\n    return obj;\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(obj) {\n    var result = {};\n    each(_.flatten(slice.call(arguments, 1)), function(key) {\n      if (key in obj) result[key] = obj[key];\n    });\n    return result;\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = function(obj) {\n    each(slice.call(arguments, 1), function(source) {\n      for (var prop in source) {\n        if (obj[prop] == null) obj[prop] = source[prop];\n      }\n    });\n    return obj;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Internal recursive comparison function.\n  function eq(a, b, stack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.\n    if (a === b) return a !== 0 || 1 / a == 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a._chain) a = a._wrapped;\n    if (b._chain) b = b._wrapped;\n    // Invoke a custom `isEqual` method if one is provided.\n    if (a.isEqual && _.isFunction(a.isEqual)) return a.isEqual(b);\n    if (b.isEqual && _.isFunction(b.isEqual)) return b.isEqual(a);\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className != toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, dates, and booleans are compared by value.\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return a == String(b);\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for\n        // other numeric values.\n        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a == +b;\n      // RegExps are compared by their source patterns and flags.\n      case '[object RegExp]':\n        return a.source == b.source &&\n               a.global == b.global &&\n               a.multiline == b.multiline &&\n               a.ignoreCase == b.ignoreCase;\n    }\n    if (typeof a != 'object' || typeof b != 'object') return false;\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    var length = stack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (stack[length] == a) return true;\n    }\n    // Add the first object to the stack of traversed objects.\n    stack.push(a);\n    var size = 0, result = true;\n    // Recursively compare objects and arrays.\n    if (className == '[object Array]') {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      size = a.length;\n      result = size == b.length;\n      if (result) {\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (size--) {\n          // Ensure commutative equality for sparse arrays.\n          if (!(result = size in a == size in b && eq(a[size], b[size], stack))) break;\n        }\n      }\n    } else {\n      // Objects with different constructors are not equivalent.\n      if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) return false;\n      // Deep compare objects.\n      for (var key in a) {\n        if (_.has(a, key)) {\n          // Count the expected number of properties.\n          size++;\n          // Deep compare each member.\n          if (!(result = _.has(b, key) && eq(a[key], b[key], stack))) break;\n        }\n      }\n      // Ensure that both objects contain the same number of properties.\n      if (result) {\n        for (key in b) {\n          if (_.has(b, key) && !(size--)) break;\n        }\n        result = !size;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    stack.pop();\n    return result;\n  }\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b, []);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;\n    for (var key in obj) if (_.has(obj, key)) return false;\n    return true;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType == 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) == '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    return obj === Object(obj);\n  };\n\n  // Is a given variable an arguments object?\n  _.isArguments = function(obj) {\n    return toString.call(obj) == '[object Arguments]';\n  };\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return !!(obj && _.has(obj, 'callee'));\n    };\n  }\n\n  // Is a given value a function?\n  _.isFunction = function(obj) {\n    return toString.call(obj) == '[object Function]';\n  };\n\n  // Is a given value a string?\n  _.isString = function(obj) {\n    return toString.call(obj) == '[object String]';\n  };\n\n  // Is a given value a number?\n  _.isNumber = function(obj) {\n    return toString.call(obj) == '[object Number]';\n  };\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return _.isNumber(obj) && isFinite(obj);\n  };\n\n  // Is the given value `NaN`?\n  _.isNaN = function(obj) {\n    // `NaN` is the only value for which `===` is not reflexive.\n    return obj !== obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';\n  };\n\n  // Is a given value a date?\n  _.isDate = function(obj) {\n    return toString.call(obj) == '[object Date]';\n  };\n\n  // Is the given value a regular expression?\n  _.isRegExp = function(obj) {\n    return toString.call(obj) == '[object RegExp]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Has own property?\n  _.has = function(obj, key) {\n    return hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iterators.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Run a function **n** times.\n  _.times = function (n, iterator, context) {\n    for (var i = 0; i < n; i++) iterator.call(context, i);\n  };\n\n  // Escape a string for HTML interpolation.\n  _.escape = function(string) {\n    return (''+string).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\\//g,'&#x2F;');\n  };\n\n  // If the value of the named property is a function then invoke it;\n  // otherwise, return it.\n  _.result = function(object, property) {\n    if (object == null) return null;\n    var value = object[property];\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Add your own custom functions to the Underscore object, ensuring that\n  // they're correctly added to the OOP wrapper as well.\n  _.mixin = function(obj) {\n    each(_.functions(obj), function(name){\n      addToWrapper(name, _[name] = obj[name]);\n    });\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = idCounter++;\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /.^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    '\\\\': '\\\\',\n    \"'\": \"'\",\n    'r': '\\r',\n    'n': '\\n',\n    't': '\\t',\n    'u2028': '\\u2028',\n    'u2029': '\\u2029'\n  };\n\n  for (var p in escapes) escapes[escapes[p]] = p;\n  var escaper = /\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g;\n  var unescaper = /\\\\(\\\\|'|r|n|t|u2028|u2029)/g;\n\n  // Within an interpolation, evaluation, or escaping, remove HTML escaping\n  // that had been previously added.\n  var unescape = function(code) {\n    return code.replace(unescaper, function(match, escape) {\n      return escapes[escape];\n    });\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  _.template = function(text, data, settings) {\n    settings = _.defaults(settings || {}, _.templateSettings);\n\n    // Compile the template source, taking care to escape characters that\n    // cannot be included in a string literal and then unescape them in code\n    // blocks.\n    var source = \"__p+='\" + text\n      .replace(escaper, function(match) {\n        return '\\\\' + escapes[match];\n      })\n      .replace(settings.escape || noMatch, function(match, code) {\n        return \"'+\\n_.escape(\" + unescape(code) + \")+\\n'\";\n      })\n      .replace(settings.interpolate || noMatch, function(match, code) {\n        return \"'+\\n(\" + unescape(code) + \")+\\n'\";\n      })\n      .replace(settings.evaluate || noMatch, function(match, code) {\n        return \"';\\n\" + unescape(code) + \"\\n;__p+='\";\n      }) + \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __p='';\" +\n      \"var print=function(){__p+=Array.prototype.join.call(arguments, '')};\\n\" +\n      source + \"return __p;\\n\";\n\n    var render = new Function(settings.variable || 'obj', '_', source);\n    if (data) return render(data, _);\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled function source as a convenience for build time\n    // precompilation.\n    template.source = 'function(' + (settings.variable || 'obj') + '){\\n' +\n      source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function, which will delegate to the wrapper.\n  _.chain = function(obj) {\n    return _(obj).chain();\n  };\n\n  // The OOP Wrapper\n  // ---------------\n\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n  var wrapper = function(obj) { this._wrapped = obj; };\n\n  // Expose `wrapper.prototype` as `_.prototype`\n  _.prototype = wrapper.prototype;\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(obj, chain) {\n    return chain ? _(obj).chain() : obj;\n  };\n\n  // A method to easily add functions to the OOP wrapper.\n  var addToWrapper = function(name, func) {\n    wrapper.prototype[name] = function() {\n      var args = slice.call(arguments);\n      unshift.call(args, this._wrapped);\n      return result(func.apply(_, args), this._chain);\n    };\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    wrapper.prototype[name] = function() {\n      var wrapped = this._wrapped;\n      method.apply(wrapped, arguments);\n      var length = wrapped.length;\n      if ((name == 'shift' || name == 'splice') && length === 0) delete wrapped[0];\n      return result(wrapped, this._chain);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    wrapper.prototype[name] = function() {\n      return result(method.apply(this._wrapped, arguments), this._chain);\n    };\n  });\n\n  // Start chaining a wrapped Underscore object.\n  wrapper.prototype.chain = function() {\n    this._chain = true;\n    return this;\n  };\n\n  // Extracts the result from a wrapped and chained object.\n  wrapper.prototype.value = function() {\n    return this._wrapped;\n  };\n\n}).call(this);",
    "sha1": "/**\r\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\r\n * in FIPS PUB 180-1. This module is used to hash user passwords in a way that's\r\n * compatible with CouchDB.\r\n *\r\n * This module is Copyright Paul Johnston 2000 - 2002 and distributed under the\r\n * BSD License. See http://pajhome.org.uk/crypt/md5 for details.\r\n *\r\n * @module\r\n */\r\n\r\n/*\r\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\r\n * in FIPS PUB 180-1\r\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\r\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\r\n * Distributed under the BSD License\r\n * See http://pajhome.org.uk/crypt/md5 for details.\r\n */\r\n\r\n/*\r\n * Configurable variables. You may need to tweak these to be compatible with\r\n * the server-side, but the defaults work in most cases.\r\n */\r\nvar hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */\r\nvar b64pad  = \"=\"; /* base-64 pad character. \"=\" for strict RFC compliance   */\r\nvar chrsz   = 8;  /* bits per input character. 8 - ASCII; 16 - Unicode      */\r\n\r\n/*\r\n * These are the functions you'll usually want to call\r\n * They take string arguments and return either hex or base-64 encoded strings\r\n */\r\nfunction hex_sha1(s){return binb2hex(core_sha1(str2binb(s),s.length * chrsz));}\r\nfunction b64_sha1(s){return binb2b64(core_sha1(str2binb(s),s.length * chrsz));}\r\nfunction str_sha1(s){return binb2str(core_sha1(str2binb(s),s.length * chrsz));}\r\nfunction hex_hmac_sha1(key, data){ return binb2hex(core_hmac_sha1(key, data));}\r\nfunction b64_hmac_sha1(key, data){ return binb2b64(core_hmac_sha1(key, data));}\r\nfunction str_hmac_sha1(key, data){ return binb2str(core_hmac_sha1(key, data));}\r\n\r\n/*\r\n * Perform a simple self-test to see if the VM is working\r\n */\r\nfunction sha1_vm_test()\r\n{\r\n  return hex_sha1(\"abc\") == \"a9993e364706816aba3e25717850c26c9cd0d89d\";\r\n}\r\n\r\n/*\r\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\r\n */\r\nfunction core_sha1(x, len)\r\n{\r\n  /* append padding */\r\n  x[len >> 5] |= 0x80 << (24 - len % 32);\r\n  x[((len + 64 >> 9) << 4) + 15] = len;\r\n\r\n  var w = Array(80);\r\n  var a =  1732584193;\r\n  var b = -271733879;\r\n  var c = -1732584194;\r\n  var d =  271733878;\r\n  var e = -1009589776;\r\n\r\n  for(var i = 0; i < x.length; i += 16)\r\n  {\r\n    var olda = a;\r\n    var oldb = b;\r\n    var oldc = c;\r\n    var oldd = d;\r\n    var olde = e;\r\n\r\n    for(var j = 0; j < 80; j++)\r\n    {\r\n      if(j < 16) w[j] = x[i + j];\r\n      else w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);\r\n      var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),\r\n                       safe_add(safe_add(e, w[j]), sha1_kt(j)));\r\n      e = d;\r\n      d = c;\r\n      c = rol(b, 30);\r\n      b = a;\r\n      a = t;\r\n    }\r\n\r\n    a = safe_add(a, olda);\r\n    b = safe_add(b, oldb);\r\n    c = safe_add(c, oldc);\r\n    d = safe_add(d, oldd);\r\n    e = safe_add(e, olde);\r\n  }\r\n  return Array(a, b, c, d, e);\r\n\r\n}\r\n\r\n/*\r\n * Perform the appropriate triplet combination function for the current\r\n * iteration\r\n */\r\nfunction sha1_ft(t, b, c, d)\r\n{\r\n  if(t < 20) return (b & c) | ((~b) & d);\r\n  if(t < 40) return b ^ c ^ d;\r\n  if(t < 60) return (b & c) | (b & d) | (c & d);\r\n  return b ^ c ^ d;\r\n}\r\n\r\n/*\r\n * Determine the appropriate additive constant for the current iteration\r\n */\r\nfunction sha1_kt(t)\r\n{\r\n  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\r\n         (t < 60) ? -1894007588 : -899497514;\r\n}\r\n\r\n/*\r\n * Calculate the HMAC-SHA1 of a key and some data\r\n */\r\nfunction core_hmac_sha1(key, data)\r\n{\r\n  var bkey = str2binb(key);\r\n  if(bkey.length > 16) bkey = core_sha1(bkey, key.length * chrsz);\r\n\r\n  var ipad = Array(16), opad = Array(16);\r\n  for(var i = 0; i < 16; i++)\r\n  {\r\n    ipad[i] = bkey[i] ^ 0x36363636;\r\n    opad[i] = bkey[i] ^ 0x5C5C5C5C;\r\n  }\r\n\r\n  var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * chrsz);\r\n  return core_sha1(opad.concat(hash), 512 + 160);\r\n}\r\n\r\n/*\r\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n * to work around bugs in some JS interpreters.\r\n */\r\nfunction safe_add(x, y)\r\n{\r\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\r\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n  return (msw << 16) | (lsw & 0xFFFF);\r\n}\r\n\r\n/*\r\n * Bitwise rotate a 32-bit number to the left.\r\n */\r\nfunction rol(num, cnt)\r\n{\r\n  return (num << cnt) | (num >>> (32 - cnt));\r\n}\r\n\r\n/*\r\n * Convert an 8-bit or 16-bit string to an array of big-endian words\r\n * In 8-bit function, characters >255 have their hi-byte silently ignored.\r\n */\r\nfunction str2binb(str)\r\n{\r\n  var bin = Array();\r\n  var mask = (1 << chrsz) - 1;\r\n  for(var i = 0; i < str.length * chrsz; i += chrsz)\r\n    bin[i>>5] |= (str.charCodeAt(i / chrsz) & mask) << (32 - chrsz - i%32);\r\n  return bin;\r\n}\r\n\r\n/*\r\n * Convert an array of big-endian words to a string\r\n */\r\nfunction binb2str(bin)\r\n{\r\n  var str = \"\";\r\n  var mask = (1 << chrsz) - 1;\r\n  for(var i = 0; i < bin.length * 32; i += chrsz)\r\n    str += String.fromCharCode((bin[i>>5] >>> (32 - chrsz - i%32)) & mask);\r\n  return str;\r\n}\r\n\r\n/*\r\n * Convert an array of big-endian words to a hex string.\r\n */\r\nfunction binb2hex(binarray)\r\n{\r\n  var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\r\n  var str = \"\";\r\n  for(var i = 0; i < binarray.length * 4; i++)\r\n  {\r\n    str += hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8+4)) & 0xF) +\r\n           hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8  )) & 0xF);\r\n  }\r\n  return str;\r\n}\r\n\r\n/*\r\n * Convert an array of big-endian words to a base-64 string\r\n */\r\nfunction binb2b64(binarray)\r\n{\r\n  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n  var str = \"\";\r\n  for(var i = 0; i < binarray.length * 4; i += 3)\r\n  {\r\n    var triplet = (((binarray[i   >> 2] >> 8 * (3 -  i   %4)) & 0xFF) << 16)\r\n                | (((binarray[i+1 >> 2] >> 8 * (3 - (i+1)%4)) & 0xFF) << 8 )\r\n                |  ((binarray[i+2 >> 2] >> 8 * (3 - (i+2)%4)) & 0xFF);\r\n    for(var j = 0; j < 4; j++)\r\n    {\r\n      if(i * 8 + j * 6 > binarray.length * 32) str += b64pad;\r\n      else str += tab.charAt((triplet >> 6*(3-j)) & 0x3F);\r\n    }\r\n  }\r\n  return str;\r\n}\r\n\r\n\r\n/**\r\n * Hashes a string using SHA1 and returns a hex representation of it.\r\n *\r\n * @name hex(s)\r\n * @param {String} s\r\n * @returns {String}\r\n * @api public\r\n */\r\n\r\nexports.hex = hex_sha1;\r\n\r\n/**\r\n * Hashes a string using SHA1 and returns a base64 representation of it.\r\n *\r\n * @name base64(s)\r\n * @param {String} s\r\n * @returns {String}\r\n * @api public\r\n */\r\n\r\nexports.base64 = b64_sha1;\r\n\r\n/**\r\n * Hashes a string using SHA1 and returns a string representation of it.\r\n *\r\n * @name str(s)\r\n * @param {String} s\r\n * @returns {String}\r\n * @api public\r\n */\r\n\r\nexports.str = str_sha1;\r\n\r\n/**\r\n * Calculates the HMAC-SHA1 of a key and some data, returning a hex\r\n * representation of it.\r\n *\r\n * @name hex_hmac(key, data)\r\n * @param {String} key\r\n * @param {String} data\r\n * @returns {String}\r\n * @api public\r\n */\r\n\r\nexports.hex_hmac = hex_hmac_sha1;\r\n\r\n/**\r\n * Calculates the HMAC-SHA1 of a key and some data, returning a base64\r\n * representation of it.\r\n *\r\n * @name base64_hmac(key, data)\r\n * @param {String} key\r\n * @param {String} data\r\n * @returns {String}\r\n * @api public\r\n */\r\n\r\nexports.base64_hmac = b64_hmac_sha1;\r\n\r\n/**\r\n * Calculates the HMAC-SHA1 of a key and some data, returning a string\r\n * representation of it.\r\n *\r\n * @name str_hmac(key, data)\r\n * @param {String} key\r\n * @param {String} data\r\n * @returns {String}\r\n * @api public\r\n */\r\n\r\nexports.str_hmac = str_hmac_sha1;\r\n",
    "db": "/*global $: false */\n\n/**\n * ## DB Module\n *\n * This contains the core functions for dealing with CouchDB. That includes\n * document CRUD operations, querying views and creating/deleting databases.\n *\n *\n * ### Events\n *\n * The db module is an EventEmitter. See the\n * [events package](http://kan.so/packages/details/events) for more information.\n *\n * #### unauthorized\n *\n * Emitted by the db module when a request results in a 401 Unauthorized\n * response. This is listened to used by the session module to help detect\n * session timeouts etc.\n *\n * ```javascript\n * var db = require(\"db\");\n *\n * db.on('unauthorized', function (req) {\n *     // req is the ajax request object which returned 401\n * });\n * ```\n *\n * @module\n */\n\n\nvar events = require('events'),\n    _ = require('underscore')._;\n\n\n/**\n * Tests if running in the browser\n *\n * @returns {Boolean}\n */\n\nfunction isBrowser() {\n    return (typeof(window) !== 'undefined');\n}\n\n\n/**\n * This module is an EventEmitter, used for emitting 'unauthorized' events\n */\n\nvar exports = module.exports = new events.EventEmitter();\n\n\n/**\n * Taken from jQuery 1.4.4 so we can support more recent versions of jQuery.\n */\n\nvar httpData = function (xhr, type, s) {\n    var ct = xhr.getResponseHeader(\"content-type\") || \"\",\n        xml = type === \"xml\" || !type && ct.indexOf(\"xml\") >= 0,\n        data = xml ? xhr.responseXML : xhr.responseText;\n\n    if (xml && data.documentElement.nodeName === \"parsererror\") {\n        $.error(\"parsererror\");\n    }\n    if (s && s.dataFilter) {\n        data = s.dataFilter(data, type);\n    }\n    if (typeof data === \"string\") {\n        if (type === \"json\" || !type && ct.indexOf(\"json\") >= 0) {\n            data = $.parseJSON(data);\n        }\n        else if (type === \"script\" || !type && ct.indexOf(\"javascript\") >= 0) {\n            $.globalEval(data);\n        }\n    }\n    return data;\n};\n\n\n/**\n * Returns a function for handling ajax responses from jquery and calls\n * the callback with the data or appropriate error.\n *\n * @param {Function} callback(err,response)\n * @api private\n */\n\nfunction onComplete(options, callback) {\n    return function (req) {\n        var resp;\n        var ctype = req.getResponseHeader('Content-Type');\n        if (ctype === 'application/json' || ctype === 'text/json') {\n            try {\n                resp = httpData(req, \"json\");\n            }\n            catch (e) {\n                return callback(e);\n            }\n        }\n        else {\n            if (options.expect_json) {\n                try {\n                    resp = httpData(req, \"json\");\n                }\n                catch (ex) {\n                    return callback(\n                        new Error('Expected JSON response, got ' + ctype)\n                    );\n                }\n            }\n            else {\n                resp = req.responseText;\n            }\n        }\n        if (req.status === 401) {\n            exports.emit('unauthorized', req);\n        }\n        if (req.status === 200 || req.status === 201 || req.status === 202) {\n            callback(null, resp);\n        }\n        else if (resp.error || resp.reason) {\n            var err = new Error(resp.reason || resp.error);\n            err.error = resp.error;\n            err.reason = resp.reason;\n            err.code = resp.code;\n            err.status = req.status;\n            callback(err);\n        }\n        else {\n            // TODO: map status code to meaningful error message\n            var err2 = new Error('Returned status code: ' + req.status);\n            err2.status = req.status;\n            callback(err2);\n        }\n    };\n}\n\n\n/**\n * Attempts to guess the database name and design doc id from the current URL,\n * or the loc paramter. Returns an object with 'db', 'design_doc' and 'root'\n * properties, or null for a URL not matching the expected format (perhaps\n * behing a vhost).\n *\n * You wouldn't normally use this function directly, but use `db.current()` to\n * return a DB object bound to the current database instead.\n *\n * @name guessCurrent([loc])\n * @param {String} loc - An alternative URL to use instead of window.location\n *     (optional)\n * @returns {Object|null} - An object with 'db', 'design_doc' and 'root'\n *     properties, or null for a URL not matching the\n *     expected format (perhaps behing a vhost)\n * @api public\n */\n\nexports.guessCurrent = function (loc) {\n    var loc = loc || window.location;\n\n    /**\n     * A database must be named with all lowercase letters (a-z), digits (0-9),\n     * or any of the _$()+-/ characters and must end with a slash in the URL.\n     * The name has to start with a lowercase letter (a-z).\n     *\n     * http://wiki.apache.org/couchdb/HTTP_database_API\n     */\n\n    var re = /\\/([a-z][a-z0-9_\\$\\(\\)\\+-\\/]*)\\/_design\\/([^\\/]+)\\//;\n    var match = re.exec(loc.pathname);\n\n    if (match) {\n        return {\n            db: match[1],\n            design_doc: match[2],\n            root: '/'\n        }\n    }\n    return null;\n};\n\n/**\n * Converts an object to a string of properly escaped URL parameters.\n *\n * @name escapeUrlParams([obj])\n * @param {Object} obj - An object containing url parameters, with\n *       parameter names stored as property names (or keys).\n * @returns {String}\n * @api public\n */\n\nexports.escapeUrlParams = function (obj) {\n    var rv = [ ];\n    for (var key in obj) {\n        rv.push(\n            encodeURIComponent(key) +\n                '=' + encodeURIComponent(obj[key])\n        );\n    }\n    return (rv.length > 0 ? ('?' + rv.join('&')) : '');\n};\n\n/**\n * Encodes a document id or view, list or show name. This also will make sure\n * the forward-slash is not escaped for documents with id's beginning with\n * \"\\_design/\".\n *\n * @name encode(str)\n * @param {String} str - the name or id to escape\n * @returns {String}\n * @api public\n */\n\nexports.encode = function (str) {\n    return encodeURIComponent(str).replace(/^_design%2F/, '_design/');\n};\n\n\n/**\n * Properly encodes query parameters to CouchDB views etc. Handle complex\n * keys and other non-string parameters by passing through JSON.stringify.\n * Returns a shallow-copied clone of the original query after complex values\n * have been stringified.\n *\n * @name stringifyQuery(query)\n * @param {Object} query\n * @returns {Object}\n * @api public\n */\n\nexports.stringifyQuery = function (query) {\n    var q = {};\n    for (var k in query) {\n        if (typeof query[k] !== 'string') {\n            q[k] = JSON.stringify(query[k]);\n        }\n        else {\n            q[k] = query[k];\n        }\n    }\n    return q;\n};\n\n\n/**\n * Make a request, with some default settings, proper callback\n * handling, and optional caching. Used behind-the-scenes by\n * most other DB module functions.\n *\n * @name request(options, callback)\n * @param {Object} options\n * @param {Function} callback(err,response)\n * @api public\n */\n\nexports.request = function (options, callback) {\n    options.complete = onComplete(options, callback);\n    options.dataType = 'json';\n    $.ajax(options);\n};\n\n\n/**\n * Creates a CouchDB database.\n *\n * If you're running behind a virtual host you'll need to set up\n * appropriate rewrites for a DELETE request to '/' either turning off safe\n * rewrites or setting up a new vhost entry.\n *\n * @name createDatabase(name, callback)\n * @param {String} name\n * @param {Function} callback(err,response)\n * @api public\n */\n\nexports.createDatabase = function (name, callback) {\n    var req = {\n        type: 'PUT',\n        url: '/' + exports.encode(name.replace(/^\\/+/, ''))\n    };\n    exports.request(req, callback);\n};\n\n/**\n * Deletes a CouchDB database.\n *\n * If you're running behind a virtual host you'll need to set up\n * appropriate rewrites for a DELETE request to '/' either turning off safe\n * rewrites or setting up a new vhost entry.\n *\n * @name deleteDatabase(name, callback)\n * @param {String} name\n * @param {Function} callback(err,response)\n * @api public\n */\n\n// TODO: detect when 'name' argument is a url and don't construct a url then\nexports.deleteDatabase = function (name, callback) {\n    var req = {\n        type: 'DELETE',\n        url: '/' + exports.encode(name.replace(/^\\/+/, ''))\n    };\n    exports.request(req, callback);\n};\n\n\n/**\n * Lists all databses\n *\n * If you're running behind a virtual host you'll need to set up\n * appropriate rewrites for a DELETE request to '/' either turning off safe\n * rewrites or setting up a new vhost entry.\n *\n * @name allDbs(callback)\n * @param {Function} callback(err,response)\n * @api public\n */\n\nexports.allDbs = function (callback) {\n    var req = {\n        type: 'GET',\n        url: '/_all_dbs'\n    };\n    exports.request(req, callback);\n};\n\n\n/**\n * Returns a new UUID generated by CouchDB. Its possible to cache\n * multiple UUIDs for later use, to avoid making too many requests.\n *\n * @name newUUID(cacheNum, callback)\n * @param {Number} cacheNum (optional, default: 1)\n * @param {Function} callback(err,response)\n * @api public\n */\n\nvar uuidCache = [];\n\nexports.newUUID = function (cacheNum, callback) {\n    if (!callback) {\n        callback = cacheNum;\n        cacheNum = 1;\n    }\n    if (uuidCache.length) {\n        return callback(null, uuidCache.shift());\n    }\n    var req = {\n        url: '/_uuids',\n        data: {count: cacheNum},\n        expect_json: true\n    };\n    exports.request(req, function (err, resp) {\n        if (err) {\n            return callback(err);\n        }\n        uuidCache = resp.uuids;\n        callback(null, uuidCache.shift());\n    });\n};\n\n\n/**\n * DB object created by use(dbname) function\n */\n\nfunction DB(url) {\n    this.url = url;\n    // add the module functions to the DB object\n    for (var k in exports) {\n        this[k] = exports[k];\n    }\n};\n\n\n/**\n * Creates a new DB object with methods operating on the database at 'url'\n *\n * The DB object also exposes the same module-level methods (eg, createDatabase)\n * so it can be used in-place of the db exports object, for example:\n *\n * ```javascript\n * var db = require('db').use('mydb');\n *\n * db.createDatabase('example', function (err, resp) {\n *     // do something\n * });\n * ```\n *\n * @name use(url)\n * @param {String} url - The url to bind the new DB object to\n * @returns {DB}\n * @api public\n */\n\n// TODO: handle full urls, not just db names\nexports.use = function (url) {\n    /* Force leading slash; make absolute path */\n    return new DB((url.substr(0, 1) !== '/' ? '/' : '') + url);\n};\n\n/**\n * Attempts to guess the current DB name and return a DB object using that.\n * Should work reliably unless running behind a virtual host.\n *\n * Throws an error if the current database url cannot be detected.\n *\n * The DB object also exposes the same module-level methods (eg, createDatabase)\n * so it can be used in-place of the db exports object, for example:\n *\n * ```javascript\n * var db = require('db').current();\n *\n * db.createDatabase('example', function (err, resp) {\n *     // do something\n * });\n * ```\n *\n * @name current()\n * @returns {DB}\n * @api public\n */\n\nexports.current = function () {\n    // guess current db url etc\n    var curr = exports.guessCurrent();\n    if (!curr) {\n        throw new Error(\n            'Cannot guess current database URL, if running behind a virtual ' +\n            'host you need to explicitly set the database URL using ' +\n            'db.use(database_url) instead of db.current()'\n        );\n    }\n    return exports.use(curr.db);\n};\n\n\n/**\n * Fetches a rewrite from the database the app is running on. Results\n * are passed to the callback, with the first argument of the callback\n * reserved for any exceptions that occurred (node.js style).\n *\n * @name DB.getRewrite(name, path, [q], callback)\n * @param {String} name - the name of the design doc\n * @param {String} path\n * @param {Object} q (optional)\n * @param {Function} callback(err,response)\n * @api public\n */\n\nDB.prototype.getRewrite = function (name, path, /*optional*/q, callback) {\n    if (!callback) {\n        callback = q;\n        q = {};\n    }\n    // prepend forward-slash if missing\n    path = (path[0] === '/') ? path: '/' + path;\n\n    try {\n        var data = exports.stringifyQuery(q);\n    }\n    catch (e) {\n        return callback(e);\n    }\n    var req = {\n        url: this.url + '/_design/' + exports.encode(name) + '/_rewrite' + path,\n        data: data\n    };\n    exports.request(req, callback);\n};\n\n\n/**\n * Queries all design documents in the database.\n *\n * @name DB.allDesignDocs([q], callback)\n * @param {Object} q - query parameters to pass to /_all_docs (optional)\n * @param {Function} callback(err,response)\n * @api public\n */\n\nDB.prototype.allDesignDocs = function (/*optional*/q, callback) {\n    if (!callback) {\n        callback = q;\n        q = {};\n    }\n    q.startkey = '\"_design\"';\n    q.endkey = '\"_design0\"';\n    this.allDocs(q, callback);\n};\n\n\n/**\n * Queries all documents in the database (include design docs).\n *\n * @name DB.allDocs([q], callback)\n * @param {Object} q - query parameters to pass to /_all_docs (optional)\n * @param {Function} callback(err,response)\n * @api public\n */\n\nDB.prototype.allDocs = function (/*optional*/q, callback) {\n    if (!callback) {\n        callback = q;\n        q = {};\n    }\n    try {\n        var data = exports.stringifyQuery(q);\n    }\n    catch (e) {\n        return callback(e);\n    }\n    var req = {\n        url: this.url + '/_all_docs',\n        data: data,\n        expect_json: true\n    };\n    exports.request(req, callback);\n};\n\n\n/**\n * Fetches a document from the database the app is running on. Results are\n * passed to the callback, with the first argument of the callback reserved\n * for any exceptions that occurred (node.js style).\n *\n * @name DB.getDoc(id, [q], callback)\n * @param {String} id\n * @param {Object} q (optional)\n * @param {Function} callback(err,response)\n * @api public\n */\n\nDB.prototype.getDoc = function (id, /*optional*/q, callback) {\n    if (!id) {\n        throw new Error('getDoc requires an id parameter to work properly');\n    }\n    if (!callback) {\n        callback = q;\n        q = {};\n    }\n    try {\n        var data = exports.stringifyQuery(q);\n    }\n    catch (e) {\n        return callback(e);\n    }\n    var req = {\n        url: this.url + '/' + exports.encode(id),\n        expect_json: true,\n        data: data\n    };\n    exports.request(req, callback);\n};\n\n\n/**\n * Saves a document to the database the app is running on. Results are\n * passed to the callback, with the first argument of the callback reserved\n * for any exceptions that occurred (node.js style).\n *\n * @name DB.saveDoc(doc, callback)\n * @param {Object} doc\n * @param {Function} callback(err,response)\n * @api public\n */\n\nDB.prototype.saveDoc = function (doc, callback) {\n    var method, url = this.url;\n    if (doc._id === undefined) {\n        method = \"POST\";\n    }\n    else {\n        method = \"PUT\";\n        url += '/' + doc._id;\n    }\n    try {\n        var data = JSON.stringify(doc);\n    }\n    catch (e) {\n        return callback(e);\n    }\n    var req = {\n        type: method,\n        url: url,\n        data: data,\n        processData: false,\n        contentType: 'application/json',\n        expect_json: true\n    };\n    exports.request(req, callback);\n};\n\n/**\n * Deletes a document from the database the app is running on. Results are\n * passed to the callback, with the first argument of the callback reserved\n * for any exceptions that occurred (node.js style).\n *\n * @name DB.removeDoc(doc, callback)\n * @param {Object} doc\n * @param {Function} callback(err,response)\n * @api public\n */\n\nDB.prototype.removeDoc = function (doc, callback) {\n    if (!doc._id) {\n        throw new Error('removeDoc requires an _id field in your document');\n    }\n    if (!doc._rev) {\n        throw new Error('removeDoc requires a _rev field in your document');\n    }\n    var req = {\n        type: 'DELETE',\n        url: this.url + '/' + exports.encode(doc._id) +\n             '?rev=' + exports.encode(doc._rev)\n    };\n    exports.request(req, callback);\n};\n\n\n/**\n * Fetches a view from the database the app is running on. Results are\n * passed to the callback, with the first argument of the callback reserved\n * for any exceptions that occurred (node.js style).\n *\n * @name DB.getView(name, view, [q], callback)\n * @param {String} name - name of the design doc to use\n * @param {String} view - name of the view\n * @param {Object} q (optional)\n * @param {Function} callback(err,response)\n * @api public\n */\n\nDB.prototype.getView = function (name, view, /*opt*/q, callback) {\n    if (!callback) {\n        callback = q;\n        q = {};\n    }\n    var viewname = exports.encode(view);\n    try {\n        var data = exports.stringifyQuery(q);\n    }\n    catch (e) {\n        return callback(e);\n    }\n    var req = {\n        url: (this.url +\n            '/_design/' + exports.encode(name) +\n            '/_view/' + viewname\n        ),\n        expect_json: true,\n        data: data\n    };\n    exports.request(req, callback);\n};\n\n\n/**\n * Fetches a spatial view from the database the app is running on. Results are\n * passed to the callback, with the first argument of the callback reserved\n * for any exceptions that occurred (node.js style).\n *\n * __Parameters:__\n * * bbox - the bounding box filter e.g.: bbox: '0,0,180,90'\n * * plane_bounds - e.g.: plane_bounds: '-180,-90,180,90'\n * * stale - stale: 'ok' prevents the spatial index to be rebuilt\n * * count - count: true will only return the number of geometries\n *\n * @name DB.getSpatialView(name, view, q, callback)\n * @param {String} name - name of the design doc to use\n * @param {String} view - name of the view\n * @param {Object} q - query parameters (see options above)\n * @param {Function} callback(err,response)\n * @api public\n */\n\nDB.prototype.getSpatialView = function (name, view, q, callback) {\n    if (!callback) {\n        callback = q;\n        q = {};\n    }\n    var viewname = exports.encode(view);\n    try {\n        var data = exports.stringifyQuery(q);\n    }\n    catch (e) {\n        return callback(e);\n    }\n    var req = {\n        url: (this.url +\n            '/_design/' + exports.encode(name) +\n            '/_spatial/' + viewname\n        ),\n        expect_json: true,\n        data: data\n    };\n    exports.request(req, callback);\n};\n\n\n/**\n * Transforms and fetches a view through a list from the database the app\n * is running on. Results are passed to the callback, with the first\n * argument of the callback reserved for any exceptions that occurred\n * (node.js style).\n *\n * @name DB.getList(name, list, view, [q], callback)\n * @param {String} name - name of the design doc to use\n * @param {String} list - name of the list function\n * @param {String} view - name of the view to apply the list function to\n * @param {Object} q (optional)\n * @param {Function} callback(err,response)\n * @api public\n */\n\n// TODO: run list function client-side?\nDB.prototype.getList = function (name, list, view, /*optional*/q, callback) {\n    if (!callback) {\n        callback = q;\n        q = {};\n    }\n    var listname = exports.encode(list);\n    var viewname = exports.encode(view);\n    try {\n        var data = exports.stringifyQuery(q);\n    }\n    catch (e) {\n        return callback(e);\n    }\n    var req = {\n        url: this.url + '/_design/' + exports.encode(name) +\n            '/_list/' + listname + '/' + viewname,\n        data: data\n    };\n    exports.request(req, callback);\n};\n\n/**\n * Transforms and fetches a document through a show from the database the app\n * is running on. Results are passed to the callback, with the first\n * argument of the callback reserved for any exceptions that occurred\n * (node.js style).\n *\n * @name DB.getShow(name, show, docid, [q], callback)\n * @param {String} name - name of the design doc to use\n * @param {String} show - name of the show function\n * @param {String} docid - id of the document to apply the show function to\n * @param {Object} q (optional)\n * @param {Function} callback(err,response)\n * @api public\n */\n\n// TODO: run show function client-side?\nDB.prototype.getShow = function (name, show, docid, /*optional*/q, callback) {\n    if (!callback) {\n        callback = q;\n        q = {};\n    }\n    try {\n        var data = exports.stringifyQuery(q);\n    }\n    catch (e) {\n        return callback(e);\n    }\n    var showname = exports.encode(show);\n    var show_url = this.url + '/_design/' +\n        exports.encode(name) + '/_show/' + exports.encode(showname);\n    var req = {\n        url: show_url + (docid ? '/' + exports.encode(docid): ''),\n        data: data\n    };\n    exports.request(req, callback);\n};\n\n\n/**\n * Fetch a design document from CouchDB.\n *\n * @name DB.getDesignDoc(name, callback)\n * @param name The name of (i.e. path to) the design document without the\n *     preceeding \"\\_design/\".\n * @param callback The callback to invoke when the request completes.\n * @api public\n */\n\nDB.prototype.getDesignDoc = function (name, callback) {\n    this.getDoc('_design/' + name, function (err, ddoc) {\n        if (err) {\n            return callback(err);\n        }\n        return callback(null, ddoc);\n    });\n};\n\n/**\n * Gets information about the database.\n *\n * @name DB.info(callback)\n * @param {Function} callback(err,response)\n * @api public\n */\n\nDB.prototype.info = function (callback) {\n    var req = {\n        url: this.url,\n        expect_json: true,\n    };\n    exports.request(req, callback);\n};\n\n\n/**\n * Listen to the changes feed for a database.\n *\n * __Options:__\n * * _filter_ - the filter function to use\n * * _since_ - the update_seq to start listening from\n * * _heartbeat_ - the heartbeat time (defaults to 10 seconds)\n * * _include_docs_ - whether to include docs in the results\n *\n * Returning false from the callback will cancel the changes listener\n *\n * @name DB.changes([q], callback)\n * @param {Object} q (optional) query parameters (see options above)\n * @param {Function} callback(err,response)\n * @api public\n */\n\n// TODO: change this to use an EventEmitter\nDB.prototype.changes = function (/*optional*/q, callback) {\n    if (!callback) {\n        callback = q;\n        q = {};\n    }\n\n    var that = this;\n\n    q = q || {};\n    q.feed = 'longpoll';\n    q.heartbeat = q.heartbeat || 10000;\n\n    function getChanges(since) {\n        q.since = since;\n        try {\n            var data = exports.stringifyQuery(q);\n        }\n        catch (e) {\n            return callback(e);\n        }\n        var req = {\n            type: 'GET',\n            expect_json: true,\n            url: that.url + '/_changes',\n            data: data\n        };\n        var cb = function (err, data) {\n            var result = callback.apply(this, arguments);\n            if (result !== false) {\n                getChanges(data.last_seq);\n            }\n        }\n        exports.request(req, cb);\n    }\n\n    // use setTimeout to pass control back to the browser briefly to\n    // allow the loading spinner to stop on page load\n    setTimeout(function () {\n        if (q.hasOwnProperty('since')) {\n            getChanges(q.since);\n        }\n        else {\n            that.info(function (err, info) {\n                if (err) {\n                    return callback(err);\n                }\n                getChanges(info.update_seq);\n            });\n        }\n    }, 0);\n};\n\n\n/**\n * Saves a list of documents, without using separate requests.\n * This function uses CouchDB's HTTP bulk document API (_bulk_docs).\n * The return value is an array of objects, each containing an 'id'\n * and a 'rev' field. The return value is passed to the callback you\n * provide via its second argument; the first argument of the callback\n * is reserved for any exceptions that occurred (node.js style).\n *\n * **Options:**\n * * *all_or\\_nothing* - Require that all documents be saved\n *   successfully (or saved with a conflict); otherwise roll\n *   back the operation.\n *\n * @name DB.bulkSave(docs, [options], callback)\n * @param {Array} docs An array of documents; each document is an object\n * @param {Object} options (optional) Options for the bulk-save operation.\n * @param {Function} callback(err,response) - A function to accept results\n *          and/or errors. Document update conflicts are reported in the\n *          results array.\n * @api public\n */\n\nDB.prototype.bulkSave = function (docs, /*optional*/ options, callback) {\n    if (!_.isArray(docs)) {\n        throw new Error(\n            'bulkSave requires an array of documents to work properly'\n        );\n    }\n    if (!callback) {\n        callback = options;\n        options = {};\n    }\n    options.docs = docs;\n    try {\n        var data = JSON.stringify(options);\n    }\n    catch (e) {\n        return callback(e);\n    }\n    var req = {\n        type: 'POST',\n        url: this.url + '/_bulk_docs',\n        data: data,\n        processData: false,\n        contentType: 'application/json',\n        expect_json: true\n    };\n    exports.request(req, callback);\n};\n\n\n/**\n * Requests a list of documents, using only a single HTTP request.\n * This function uses CouchDB's HTTP bulk document API (_all_docs).\n * The return value is an array of objects, each of which is a document.\n * The return value is passed to the callback you provide via its second\n * argument; the first argument of the callback is reserved for any\n * exceptions that occurred (node.js style).\n *\n * @name DB.bulkGet(keys, [q], callback)\n * @param {Array} keys An array of documents identifiers (i.e. strings).\n * @param {Object} q (optional) Query parameters for the bulk-read operation.\n * @param {Function} callback(err,response) - A function to accept results\n *          and/or errors. Document update conflicts are reported in the\n *          results array.\n * @api public\n */\n\nDB.prototype.bulkGet = function (keys, /*optional*/ q, callback) {\n    if (keys && !_.isArray(keys)) {\n        throw new Error(\n            'bulkGet requires that _id values be supplied as a list'\n        );\n    }\n    if (!callback) {\n        callback = q;\n        q = {};\n    }\n\n    /* Encode every query-string option:\n        CouchDB requires that these be JSON, even though they\n        will be URL-encoded as part of the request process. */\n\n    try {\n        for (var k in q) {\n            q[k] = JSON.stringify(q[k]);\n        }\n    }\n    catch (e) {\n        return callback(e);\n    }\n\n    /* Make request:\n        If we have a list of keys, use a post request containing\n        a JSON-encoded list of keys. Otherwise, use a get request. */\n\n    var req = {\n        expect_json: true,\n        url: this.url + '/_all_docs' + exports.escapeUrlParams(q)\n    };\n    if (keys) {\n        try {\n            var data = JSON.stringify({ keys: keys});\n        }\n        catch (e) {\n            return callback(e);\n        }\n        req = _.extend(req, {\n            type: 'POST',\n            processData: false,\n            contentType: 'application/json',\n            data: data\n        });\n    } else {\n        req = _.extend(req, {\n            type: 'GET'\n        });\n    }\n\n    exports.request(req, callback);\n};\n\n\n/**\n * DB methods can only be called client-side\n */\n\n_.each(_.keys(DB.prototype), function (k) {\n    var _fn = DB.prototype[k];\n    DB.prototype[k] = function () {\n        if (!isBrowser()) {\n            throw new Error(k + ' cannot be called server-side');\n        }\n        return _fn.apply(this, arguments);\n    };\n});\n",
    "session": "/**\n * ## Session module\n *\n * This module contains functions related to session management. Logging in,\n * logging out and checking the current state of a user's session.\n *\n * Functions in this module follow the node.js callback style. The first\n * argument is an error object (if one occurred), the following arguments are\n * the results of the operation. The callback is always the last argument to a\n * function.\n *\n *\n * ### Events\n *\n * The session module is an EventEmitter. See the\n * [events package](http://kan.so/packages/details/events) for more information.\n *\n * #### change\n *\n * Emitted whenever a change to the user's session is detected, this\n * can occur as the result of a login/logout call or by getting the user's\n * session info (and it's changed).\n *\n * ```javascript\n * var session = require(\"session\");\n *\n * session.on('change', function (userCtx) {\n *     // update session information, eg \"Logged in as ...\"\n * });\n * ```\n *\n * @module\n */\n\n\nvar events = require('events'),\n    db = require('db');\n\n\n/**\n * Quick utility function for testing if running in the browser, since\n * these functions won't run on CouchDB server-side\n */\n\nfunction isBrowser() {\n    return (typeof(window) !== 'undefined');\n}\n\n/**\n * When a db call results in an unauthorized response, the user's session is\n * checked to see if their session has timed out or they've logged out in\n * another screen.\n *\n * This check is throttled to once per second, to avoid flooding the server if\n * multiple requests are made with incorrect permissions.\n */\n\nvar last_session_check = 0;\n\ndb.on('unauthorized', function (req) {\n    // db call returned 'Unauthorized', check the user's session if it's not\n    // been checked on an 'Unauthorized' repsonse in the last second\n    if (last_session_check < new Date().getTime() - 1000) {\n        exports.info();\n    }\n});\n\n\n/**\n * This module is an EventEmitter, used for handling 'change' events\n */\n\nvar exports = module.exports = new events.EventEmitter();\n\n\n/**\n * Attempt to login using the username and password provided.\n *\n * @name login(username, password, callback)\n * @param {String} username - the username to login with\n * @param {String} password - the user's password (unhashed)\n * @param {Function} callback - function called with the result of the login\n *     attempt\n * @api public\n *\n * ```javascript\n * session.login('testuser', 'password', function (err, response) {\n *     if (err) // an error occurred logging in\n *     else     // success\n * });\n * ```\n */\n\nexports.login = function (username, password, callback) {\n    if (!isBrowser()) {\n        throw new Error('login cannot be called server-side');\n    }\n    db.request({\n        type: \"POST\",\n        url: \"/_session\",\n        data: {name: username, password: password}\n    },\n    function (err, resp) {\n        if (resp && resp.ok) {\n            // TODO: for some reason resp.name is set to null in the response\n            // even though the roles are correct for the user! Look into this\n            // and see if its a bug in couchdb, for now, just using the username\n            // given to the login function instead, since we know the login\n            // request was accepted.\n            exports.userCtx = {name: username, roles: resp.roles};\n            exports.session = {userCtx: exports.userCtx};\n            exports.emit('change', exports.userCtx);\n        }\n        if (callback) {\n            callback(err, resp);\n        }\n    });\n};\n\n\n/**\n * Logs out the current user.\n *\n * @name logout(callback)\n * @param {Function} callback - function called with the result of the logout\n *     attempt\n * @api public\n *\n * ```javascript\n * session.logout(function (err, response) {\n *     if (err) // an error occurred logging out\n *     else     // success\n * });\n * ```\n */\n\nexports.logout = function (callback) {\n    if (!isBrowser()) {\n        throw new Error('logout cannot be called server-side');\n    }\n    db.request({\n        type: \"DELETE\",\n        url: \"/_session\", // don't need baseURL, /_session always available\n        username: \"_\",\n        password : \"_\"\n    },\n    function (err, resp) {\n        if (resp && resp.ok) {\n            exports.userCtx = {name: null, roles: []};\n            exports.session = {userCtx: exports.userCtx};\n            exports.emit('change', exports.userCtx);\n        }\n        if (callback) {\n            callback(err, resp);\n        }\n    });\n};\n\n\n/**\n * Returns the current user's session information. The info object contains a\n * `userCtx` property and an `info` property. The first contains the name and\n * roles of the current user, the second contains information about the user\n * database and authentication handlers.\n *\n * @name info(callback)\n * @param {Function} callback - function called with the session information\n * @api public\n *\n * ```javascript\n * session.info(function (err, info) {\n *     if (err) // an error occurred getting session info\n *     else     // success\n * });\n * ```\n */\n\nexports.info = function (callback) {\n    if (!isBrowser()) {\n        throw new Error('info cannot be called server-side');\n    }\n    db.request({\n        type: \"GET\",\n        url: \"/_session\"\n    },\n    function (err, resp) {\n        var oldUserCtx = exports.userCtx;\n        exports.session = resp;\n        exports.userCtx = (resp && resp.userCtx) || {name: null, roles: []};\n        // TODO: should this check for differences in more than just name?\n        if (!oldUserCtx || oldUserCtx.name !== exports.userCtx.name) {\n            exports.emit('change', exports.userCtx);\n        }\n        if (callback) {\n            callback(err, resp);\n        }\n    });\n};\n",
    "events": "/**\n * ## Events module\n *\n * This is a browser port of the node.js events module. Many objects and\n * modules emit events and these are instances of events.EventEmitter.\n *\n * You can access this module by doing: `require(\"events\")`\n *\n * Functions can then be attached to objects, to be executed when an event is\n * emitted. These functions are called listeners.\n *\n * @module\n */\n\n\n/**\n * To access the EventEmitter class, require('events').EventEmitter.\n *\n * When an EventEmitter instance experiences an error, the typical action is to\n * emit an 'error' event. Error events are treated as a special case. If there\n * is no listener for it, then the default action is for the error to throw.\n *\n * All EventEmitters emit the event 'newListener' when new listeners are added.\n *\n * @name events.EventEmitter\n * @api public\n *\n * ```javascript\n * var EventEmitter = require('events').EventEmitter;\n *\n * // create an event emitter\n * var emitter = new EventEmitter();\n * ```\n */\n\nvar EventEmitter = exports.EventEmitter = function () {};\n\nvar isArray = Array.isArray || function (obj) {\n    return toString.call(obj) === '[object Array]';\n};\n\n\n/**\n * By default EventEmitters will print a warning if more than 10 listeners are\n * added for a particular event. This is a useful default which helps finding\n * memory leaks. Obviously not all Emitters should be limited to 10. This\n * function allows that to be increased. Set to zero for unlimited.\n *\n * @name emitter.setMaxListeners(n)\n * @param {Number} n - The maximum number of listeners\n * @api public\n */\n\n// By default EventEmitters will print a warning if more than\n// 10 listeners are added to it. This is a useful default which\n// helps finding memory leaks.\n//\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nvar defaultMaxListeners = 10;\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!this._events) this._events = {};\n  this._events.maxListeners = n;\n};\n\n\n/**\n * Execute each of the listeners in order with the supplied arguments.\n *\n * @name emitter.emit(event, [arg1], [arg2], [...])\n * @param {String} event - The event name/id to fire\n * @api public\n */\n\nEventEmitter.prototype.emit = function(type) {\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events || !this._events.error ||\n        (isArray(this._events.error) && !this._events.error.length))\n    {\n      if (arguments[1] instanceof Error) {\n        throw arguments[1]; // Unhandled 'error' event\n      } else {\n        throw new Error(\"Uncaught, unspecified 'error' event.\");\n      }\n      return false;\n    }\n  }\n\n  if (!this._events) return false;\n  var handler = this._events[type];\n  if (!handler) return false;\n\n  if (typeof handler == 'function') {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        var args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n    return true;\n\n  } else if (isArray(handler)) {\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    var listeners = handler.slice();\n    for (var i = 0, l = listeners.length; i < l; i++) {\n      listeners[i].apply(this, args);\n    }\n    return true;\n\n  } else {\n    return false;\n  }\n};\n\n\n/**\n * Adds a listener to the end of the listeners array for the specified event.\n *\n * @name emitter.on(event, listener) | emitter.addListener(event, listener)\n * @param {String} event - The event name/id to listen for\n * @param {Function} listener - The function to bind to the event\n * @api public\n *\n * ```javascript\n * session.on('change', function (userCtx) {\n *     console.log('session changed!');\n * });\n * ```\n */\n\n// EventEmitter is defined in src/node_events.cc\n// EventEmitter.prototype.emit() is also defined there.\nEventEmitter.prototype.addListener = function(type, listener) {\n  if ('function' !== typeof listener) {\n    throw new Error('addListener only takes instances of Function');\n  }\n\n  if (!this._events) this._events = {};\n\n  // To avoid recursion in the case that type == \"newListeners\"! Before\n  // adding it to the listeners, first emit \"newListeners\".\n  this.emit('newListener', type, listener);\n\n  if (!this._events[type]) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  } else if (isArray(this._events[type])) {\n\n    // Check for listener leak\n    if (!this._events[type].warned) {\n      var m;\n      if (this._events.maxListeners !== undefined) {\n        m = this._events.maxListeners;\n      } else {\n        m = defaultMaxListeners;\n      }\n\n      if (m && m > 0 && this._events[type].length > m) {\n        this._events[type].warned = true;\n        console.error('(node) warning: possible EventEmitter memory ' +\n                      'leak detected. %d listeners added. ' +\n                      'Use emitter.setMaxListeners() to increase limit.',\n                      this._events[type].length);\n        console.trace();\n      }\n    }\n\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  } else {\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\n/**\n * Adds a one time listener for the event. This listener is invoked only the\n * next time the event is fired, after which it is removed.\n *\n * @name emitter.once(event, listener)\n * @param {String} event- The event name/id to listen for\n * @param {Function} listener - The function to bind to the event\n * @api public\n *\n * ```javascript\n * db.once('unauthorized', function (req) {\n *     // this event listener will fire once, then be unbound\n * });\n * ```\n */\n\nEventEmitter.prototype.once = function(type, listener) {\n  var self = this;\n  self.on(type, function g() {\n    self.removeListener(type, g);\n    listener.apply(this, arguments);\n  });\n\n  return this;\n};\n\n/**\n * Remove a listener from the listener array for the specified event. Caution:\n * changes array indices in the listener array behind the listener.\n *\n * @name emitter.removeListener(event, listener)\n * @param {String} event - The event name/id to remove the listener from\n * @param {Function} listener - The listener function to remove\n * @api public\n *\n * ```javascript\n * var callback = function (init) {\n *     console.log('duality app loaded');\n * };\n * devents.on('init', callback);\n * // ...\n * devents.removeListener('init', callback);\n * ```\n */\n\nEventEmitter.prototype.removeListener = function(type, listener) {\n  if ('function' !== typeof listener) {\n    throw new Error('removeListener only takes instances of Function');\n  }\n\n  // does not use listeners(), so no side effect of creating _events[type]\n  if (!this._events || !this._events[type]) return this;\n\n  var list = this._events[type];\n\n  if (isArray(list)) {\n    var i = list.indexOf(listener);\n    if (i < 0) return this;\n    list.splice(i, 1);\n    if (list.length == 0)\n      delete this._events[type];\n  } else if (this._events[type] === listener) {\n    delete this._events[type];\n  }\n\n  return this;\n};\n\n/**\n * Removes all listeners, or those of the specified event.\n *\n * @name emitter.removeAllListeners([event])\n * @param {String} event - Event name/id to remove all listeners for (optional)\n * @api public\n */\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  // does not use listeners(), so no side effect of creating _events[type]\n  if (type && this._events && this._events[type]) this._events[type] = null;\n  return this;\n};\n\n/**\n * Returns an array of listeners for the specified event. This array can be\n * manipulated, e.g. to remove listeners.\n *\n * @name emitter.listeners(event)\n * @param {String} events - The event name/id to return listeners for\n * @api public\n *\n * ```javascript\n * session.on('change', function (stream) {\n *     console.log('session changed');\n * });\n * console.log(util.inspect(session.listeners('change'))); // [ [Function] ]\n * ```\n */\n\nEventEmitter.prototype.listeners = function(type) {\n  if (!this._events) this._events = {};\n  if (!this._events[type]) this._events[type] = [];\n  if (!isArray(this._events[type])) {\n    this._events[type] = [this._events[type]];\n  }\n  return this._events[type];\n};\n\n\n/**\n * @name emitter Event: 'newListener'\n *\n * This event is emitted any time someone adds a new listener.\n *\n * ```javascript\n * emitter.on('newListener', function (event, listener) {\n *     // new listener added\n * });\n * ```\n */\n",
    "rewrites": [],
    "kanso": {
        "config": {
            "name": "oauth-key-management",
            "version": "0.0.1",
            "description": "OAuth Key Management",
            "attachments": [
                "index.html",
                "css",
                "images"
            ],
            "modules": [
                "lib"
            ],
            "load": "lib/app",
            "dependencies": {
                "attachments": null,
                "modules": null,
                "users": null,
                "underscore": null,
                "properties": null
            },
            "minify": false
        },
        "build_time": "2012-10-03T21:27:24Z",
        "kanso_version": "0.2.2"
    }
}
