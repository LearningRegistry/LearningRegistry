<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1315842746000</longProp>
        <longProp name="ThreadGroup.end_time">1315842746000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="dataDirectory" elementType="Argument">
              <stringProp name="Argument.name">dataDirectory</stringProp>
              <stringProp name="Argument.value">C:\ADL\Learning Registry\jMeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LRNodeAddress" elementType="Argument">
              <stringProp name="Argument.name">LRNodeAddress</stringProp>
              <stringProp name="Argument.value">lrdev05.learningregistry.org</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LRNodePort" elementType="Argument">
              <stringProp name="Argument.name">LRNodePort</stringProp>
              <stringProp name="Argument.value">80</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /publish &lt;attached json&gt;" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${LRNodeAddress}</stringProp>
          <stringProp name="HTTPSampler.port">${LRNodePort}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/publish</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${dataDirectory}/resource_data-json-attached.json" elementType="HTTPFileArg">
                <stringProp name="File.path">${dataDirectory}/resource_data-json-attached.json</stringProp>
                <stringProp name="File.paramname"></stringProp>
                <stringProp name="File.mimetype">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">function raiseError(txt) {
	OUT.println(&quot;Caught Error: &quot;+txt);
	AssertionResult.setFailureMessage(txt);
	AssertionResult.setFailure(true);
}

eval(&apos;var json = &apos;+prev.getResponseDataAsString());

if (json.OK) {
	OUT.println(&quot;response ok: &quot;+json.OK );
	if (json.document_results &amp;&amp; json.document_results.length &gt; 0) {
		for (i=0; i&lt;json.document_results.length; i++) {
			var result = json.document_results[i];
			if (!result.OK) {
				var msg = result.error ? result.error : &quot;Document Error&quot;;
				OUT.println(msg);
				raiseError( msg );
				break;
			}
		} 
	} else {
		OUT.println(&quot;Bad Reply&quot;);
		raiseError( &quot;Unexpected Response&quot; );
	}

} else {
	OUT.println(&quot;Bad Reply&quot;);
	raiseError( &quot;Bad Reply&quot; );
}

</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /publish &lt;inline json&gt;" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${LRNodeAddress}</stringProp>
          <stringProp name="HTTPSampler.port">${LRNodePort}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/publish</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${dataDirectory}/resource_data-json-inline.json" elementType="HTTPFileArg">
                <stringProp name="File.path">${dataDirectory}/resource_data-json-inline.json</stringProp>
                <stringProp name="File.paramname"></stringProp>
                <stringProp name="File.mimetype">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">function raiseError(txt) {
	OUT.println(&quot;Caught Error: &quot;+txt);
	AssertionResult.setFailureMessage(txt);
	AssertionResult.setFailure(true);
}

eval(&apos;var json = &apos;+prev.getResponseDataAsString());

if (json.OK) {
	OUT.println(&quot;response ok: &quot;+json.OK );
	if (json.document_results &amp;&amp; json.document_results.length &gt; 0) {
		for (i=0; i&lt;json.document_results.length; i++) {
			var result = json.document_results[i];
			if (!result.OK) {
				var msg = result.error ? result.error : &quot;Document Error&quot;;
				OUT.println(msg);
				raiseError( msg );
				break;
			}
		} 
	} else {
		OUT.println(&quot;Bad Reply&quot;);
		raiseError( &quot;Unexpected Response&quot; );
	}

} else {
	OUT.println(&quot;Bad Reply&quot;);
	raiseError( &quot;Bad Reply&quot; );
}

</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /publish &lt;linked json&gt;" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${LRNodeAddress}</stringProp>
          <stringProp name="HTTPSampler.port">${LRNodePort}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/publish</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${dataDirectory}/resource_data-json-linked.json" elementType="HTTPFileArg">
                <stringProp name="File.path">${dataDirectory}/resource_data-json-linked.json</stringProp>
                <stringProp name="File.paramname"></stringProp>
                <stringProp name="File.mimetype">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">function raiseError(txt) {
	OUT.println(&quot;Caught Error: &quot;+txt);
	AssertionResult.setFailureMessage(txt);
	AssertionResult.setFailure(true);
}

eval(&apos;var json = &apos;+prev.getResponseDataAsString());

if (json.OK) {
	OUT.println(&quot;response ok: &quot;+json.OK );
	if (json.document_results &amp;&amp; json.document_results.length &gt; 0) {
		for (i=0; i&lt;json.document_results.length; i++) {
			var result = json.document_results[i];
			if (!result.OK) {
				var msg = result.error ? result.error : &quot;Document Error&quot;;
				OUT.println(msg);
				raiseError( msg );
				break;
			}
		} 
	} else {
		OUT.println(&quot;Bad Reply&quot;);
		raiseError( &quot;Unexpected Response&quot; );
	}

} else {
	OUT.println(&quot;Bad Reply&quot;);
	raiseError( &quot;Bad Reply&quot; );
}

</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /publish &lt;attached xml&gt;" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${LRNodeAddress}</stringProp>
          <stringProp name="HTTPSampler.port">${LRNodePort}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/publish</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${dataDirectory}/resource_data-xml-attached.json" elementType="HTTPFileArg">
                <stringProp name="File.path">${dataDirectory}/resource_data-xml-attached.json</stringProp>
                <stringProp name="File.paramname"></stringProp>
                <stringProp name="File.mimetype">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">function raiseError(txt) {
	OUT.println(&quot;Caught Error: &quot;+txt);
	AssertionResult.setFailureMessage(txt);
	AssertionResult.setFailure(true);
}

eval(&apos;var json = &apos;+prev.getResponseDataAsString());

if (json.OK) {
	OUT.println(&quot;response ok: &quot;+json.OK );
	if (json.document_results &amp;&amp; json.document_results.length &gt; 0) {
		for (i=0; i&lt;json.document_results.length; i++) {
			var result = json.document_results[i];
			if (!result.OK) {
				var msg = result.error ? result.error : &quot;Document Error&quot;;
				OUT.println(msg);
				raiseError( msg );
				break;
			}
		} 
	} else {
		OUT.println(&quot;Bad Reply&quot;);
		raiseError( &quot;Unexpected Response&quot; );
	}

} else {
	OUT.println(&quot;Bad Reply&quot;);
	raiseError( &quot;Bad Reply&quot; );
}

</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /publish &lt;inline xml&gt;" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${LRNodeAddress}</stringProp>
          <stringProp name="HTTPSampler.port">${LRNodePort}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/publish</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${dataDirectory}/resource_data-xml-inline.json" elementType="HTTPFileArg">
                <stringProp name="File.path">${dataDirectory}/resource_data-xml-inline.json</stringProp>
                <stringProp name="File.paramname"></stringProp>
                <stringProp name="File.mimetype">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">function raiseError(txt) {
	OUT.println(&quot;Caught Error: &quot;+txt);
	AssertionResult.setFailureMessage(txt);
	AssertionResult.setFailure(true);
}

eval(&apos;var json = &apos;+prev.getResponseDataAsString());

if (json.OK) {
	OUT.println(&quot;response ok: &quot;+json.OK );
	if (json.document_results &amp;&amp; json.document_results.length &gt; 0) {
		for (i=0; i&lt;json.document_results.length; i++) {
			var result = json.document_results[i];
			if (!result.OK) {
				var msg = result.error ? result.error : &quot;Document Error&quot;;
				OUT.println(msg);
				raiseError( msg );
				break;
			}
		} 
	} else {
		OUT.println(&quot;Bad Reply&quot;);
		raiseError( &quot;Unexpected Response&quot; );
	}

} else {
	OUT.println(&quot;Bad Reply&quot;);
	raiseError( &quot;Bad Reply&quot; );
}

</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /publish &lt;linked xml&gt;" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${LRNodeAddress}</stringProp>
          <stringProp name="HTTPSampler.port">${LRNodePort}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/publish</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${dataDirectory}/resource_data-xml-linked.json" elementType="HTTPFileArg">
                <stringProp name="File.path">${dataDirectory}/resource_data-xml-linked.json</stringProp>
                <stringProp name="File.paramname"></stringProp>
                <stringProp name="File.mimetype">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">function raiseError(txt) {
	OUT.println(&quot;Caught Error: &quot;+txt);
	AssertionResult.setFailureMessage(txt);
	AssertionResult.setFailure(true);
}

eval(&apos;var json = &apos;+prev.getResponseDataAsString());

if (json.OK) {
	OUT.println(&quot;response ok: &quot;+json.OK );
	if (json.document_results &amp;&amp; json.document_results.length &gt; 0) {
		for (i=0; i&lt;json.document_results.length; i++) {
			var result = json.document_results[i];
			if (!result.OK) {
				var msg = result.error ? result.error : &quot;Document Error&quot;;
				OUT.println(msg);
				raiseError( msg );
				break;
			}
		} 
	} else {
		OUT.println(&quot;Bad Reply&quot;);
		raiseError( &quot;Unexpected Response&quot; );
	}

} else {
	OUT.println(&quot;Bad Reply&quot;);
	raiseError( &quot;Bad Reply&quot; );
}

</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">true</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
